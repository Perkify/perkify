import { NextFunction, Request, Response } from 'express';
import { validationResult } from 'express-validator';

const isInstanceOfPerkifyError = (object: any) => {
  return 'status' in object && 'reason' in object && 'reasonDetail' in object;
};

export const errorHandler = async (err: any, req: Request, res: Response) => {
  console.error(err);

  // if response already sent, can't do anything
  if (res.headersSent) {
    return;
  }

  // if error is not generated by us, send a general error message
  if (!isInstanceOfPerkifyError(err)) {
    err = {
      status: 500,
      reason: 'INTERNAL_SERVER_ERROR',
      reasonDetail: err ? err?.toString() : undefined,
    } as PerkifyError;
  }

  // extract status, reason, and reasonDetail
  const { status, reason, reasonDetail } = err;
  res.status(status).json({ reason, reasonDetail }).end();
};

// --------------- Middleware/Helpers --------------- //
export const errorHandlerMiddleware = async (
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  errorHandler(err, req, res);
};

export const checkValidationResult = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    const error = {
      status: 400,
      reason: 'Bad Request',
      reasonDetail: JSON.stringify(errors.array()),
    };
    return next(error);
  }
  return next();
};
