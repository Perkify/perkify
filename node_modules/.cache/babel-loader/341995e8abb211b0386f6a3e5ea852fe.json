{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/manageGroups/AddEmployees.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from \"@material-ui/core\";\nimport { AuthContext } from \"contexts/Auth\";\nimport React, { useContext, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddEmployees = ({\n  isAddEmployeesModalVisible,\n  setIsAddEmployeesModalVisible,\n  employees,\n  group,\n  selectedPerks\n}) => {\n  _s();\n\n  const [emailsToAdd, setEmailsToAdd] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  const handleEmailError = event => {\n    setEmailsToAdd(event.target.value);\n\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addEmployeesToPerkGroup = event => {\n    event.preventDefault();\n    let error = false;\n\n    if (emailsToAdd == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n\n    if (!error) {\n      setIsAddEmployeesModalVisible(false);\n\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n        const emailList = emailsToAdd.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n\n        const afterEmployees = emailList.concat(employees.map(employeeObj => employeeObj.email));\n        console.log(afterEmployees);\n        await PerkifyApi.put(\"user/auth/updatePerkGroup\", JSON.stringify({\n          group,\n          perks: selectedPerks.map(perkObj => perkObj.Name),\n          emails: afterEmployees\n        }), {\n          headers: {\n            Authorization: `Bearer ${bearerToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      })();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: isAddEmployeesModalVisible,\n    onClose: () => setIsAddEmployeesModalVisible(false),\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      children: \"Add Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: \"To add users to this perk group, please enter their email addresses below.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginTop: \"30px\",\n          marginBottom: \"15px\"\n        },\n        children: \"Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"emailaddresses\",\n        variant: \"outlined\",\n        label: \"\",\n        placeholder: \"Insert emails separated by commas or newlines\",\n        value: emailsToAdd,\n        onChange: handleEmailError,\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        rowsMax: 4,\n        error: emailsError != \"\",\n        helperText: emailsError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsAddEmployeesModalVisible(false),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addEmployeesToPerkGroup,\n          color: \"primary\",\n          children: \"Add Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddEmployees, \"T7NPhT394XAqxkjDchOpfB1aYRM=\");\n\n_c = AddEmployees;\nexport default AddEmployees;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEmployees\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/manageGroups/AddEmployees.tsx"],"names":["Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","Typography","AuthContext","React","useContext","useState","PerkifyApi","validateEmails","AddEmployees","isAddEmployeesModalVisible","setIsAddEmployeesModalVisible","employees","group","selectedPerks","emailsToAdd","setEmailsToAdd","emailsError","setEmailsError","currentUser","handleEmailError","event","target","value","addEmployeesToPerkGroup","preventDefault","error","bearerToken","getIdToken","emailList","replace","split","afterEmployees","concat","map","employeeObj","email","console","log","put","JSON","stringify","perks","perkObj","Name","emails","headers","Authorization","marginTop","marginBottom"],"mappings":";;;AAAA,SACEA,MADF,EAEEC,MAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,iBALF,EAMEC,WANF,EAOEC,SAPF,EAQEC,UARF,QASO,mBATP;AAUA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,0BADoB;AAEpBC,EAAAA,6BAFoB;AAGpBC,EAAAA,SAHoB;AAIpBC,EAAAA,KAJoB;AAKpBC,EAAAA;AALoB,CAAD,KAMf;AAAA;;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAkBd,UAAU,CAACF,WAAD,CAAlC;;AACA,QAAMiB,gBAAgB,GAAIC,KAAD,IAAW;AAClCL,IAAAA,cAAc,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AACA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC7BL,MAAAA,cAAc,CAAC,gCAAD,CAAd;AACD,KAFD,MAEO,IAAI,CAACV,cAAc,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB,EAAyC;AAC9CL,MAAAA,cAAc,CAAC,4BAAD,CAAd;AACD,KAFM,MAEA;AACLA,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GATD;;AAWA,QAAMM,uBAAuB,GAAIH,KAAD,IAAW;AACzCA,IAAAA,KAAK,CAACI,cAAN;AACA,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAIX,WAAW,IAAI,EAAnB,EAAuB;AACrBG,MAAAA,cAAc,CAAC,cAAD,CAAd;AACAQ,MAAAA,KAAK,GAAG,IAAR;AACD;;AACD,QAAI,CAACA,KAAL,EAAY;AACVf,MAAAA,6BAA6B,CAAC,KAAD,CAA7B;;AACA,OAAC,YAAY;AACX,cAAMgB,WAAW,GAAG,MAAMR,WAAW,CAACS,UAAZ,EAA1B;AAEA,cAAMC,SAAS,GAAGd,WAAW,CAACe,OAAZ,CAAoB,UAApB,EAAgC,GAAhC,EAAqCC,KAArC,CAA2C,KAA3C,CAAlB,CAHW,CAG0D;;AAErE,cAAMC,cAAc,GAAGH,SAAS,CAACI,MAAV,CACrBrB,SAAS,CAACsB,GAAV,CAAeC,WAAD,IAAiBA,WAAW,CAACC,KAA3C,CADqB,CAAvB;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AAEA,cAAMzB,UAAU,CAACgC,GAAX,CACJ,2BADI,EAEJC,IAAI,CAACC,SAAL,CAAe;AACb5B,UAAAA,KADa;AAEb6B,UAAAA,KAAK,EAAE5B,aAAa,CAACoB,GAAd,CAAmBS,OAAD,IAAaA,OAAO,CAACC,IAAvC,CAFM;AAGbC,UAAAA,MAAM,EAAEb;AAHK,SAAf,CAFI,EAOJ;AACEc,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,UAASpB,WAAY,EAD9B;AAEP,4BAAgB;AAFT;AADX,SAPI,CAAN;AAcD,OAzBD;AA0BD;AACF,GApCD;;AAsCA,sBACE,QAAC,MAAD;AACE,IAAA,IAAI,EAAEjB,0BADR;AAEE,IAAA,OAAO,EAAE,MAAMC,6BAA6B,CAAC,KAAD,CAF9C;AAGE,uBAAgB,mBAHlB;AAAA,4BAKE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,aAAD;AAAA,8BACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,UAAD;AAAY,QAAA,KAAK,EAAE;AAAEqC,UAAAA,SAAS,EAAE,MAAb;AAAqBC,UAAAA,YAAY,EAAE;AAAnC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAQE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,gBADL;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,EAHR;AAIE,QAAA,WAAW,EAAC,+CAJd;AAKE,QAAA,KAAK,EAAElC,WALT;AAME,QAAA,QAAQ,EAAEK,gBANZ;AAOE,QAAA,SAAS,MAPX;AAQE,QAAA,SAAS,MARX;AASE,QAAA,IAAI,EAAE,CATR;AAUE,QAAA,OAAO,EAAE,CAVX;AAWE,QAAA,KAAK,EAAEH,WAAW,IAAI,EAXxB;AAYE,QAAA,UAAU,EAAEA;AAZd;AAAA;AAAA;AAAA;AAAA,cARF,eAsBE,QAAC,aAAD;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAE,MAAMN,6BAA6B,CAAC,KAAD,CAD9C;AAEE,UAAA,KAAK,EAAC,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEa,uBAAjB;AAA0C,UAAA,KAAK,EAAC,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD,CAvGD;;GAAMf,Y;;KAAAA,Y;AAyGN,eAAeA,YAAf","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { AuthContext } from \"contexts/Auth\";\nimport React, { useContext, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\n\nconst AddEmployees = ({\n  isAddEmployeesModalVisible,\n  setIsAddEmployeesModalVisible,\n  employees,\n  group,\n  selectedPerks,\n}) => {\n  const [emailsToAdd, setEmailsToAdd] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n\n  const { currentUser } = useContext(AuthContext);\n  const handleEmailError = (event) => {\n    setEmailsToAdd(event.target.value);\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addEmployeesToPerkGroup = (event) => {\n    event.preventDefault();\n    let error = false;\n    if (emailsToAdd == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n    if (!error) {\n      setIsAddEmployeesModalVisible(false);\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n\n        const emailList = emailsToAdd.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n\n        const afterEmployees = emailList.concat(\n          employees.map((employeeObj) => employeeObj.email)\n        );\n\n        console.log(afterEmployees);\n\n        await PerkifyApi.put(\n          \"user/auth/updatePerkGroup\",\n          JSON.stringify({\n            group,\n            perks: selectedPerks.map((perkObj) => perkObj.Name),\n            emails: afterEmployees,\n          }),\n          {\n            headers: {\n              Authorization: `Bearer ${bearerToken}`,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n      })();\n    }\n  };\n\n  return (\n    <Dialog\n      open={isAddEmployeesModalVisible}\n      onClose={() => setIsAddEmployeesModalVisible(false)}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Users</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To add users to this perk group, please enter their email addresses\n          below.\n        </DialogContentText>\n        <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n          Emails\n        </Typography>\n        <TextField\n          id=\"emailaddresses\"\n          variant=\"outlined\"\n          label=\"\"\n          placeholder=\"Insert emails separated by commas or newlines\"\n          value={emailsToAdd}\n          onChange={handleEmailError}\n          fullWidth\n          multiline\n          rows={4}\n          rowsMax={4}\n          error={emailsError != \"\"}\n          helperText={emailsError}\n        />\n        <DialogActions>\n          <Button\n            onClick={() => setIsAddEmployeesModalVisible(false)}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n          <Button onClick={addEmployeesToPerkGroup} color=\"primary\">\n            Add Users\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AddEmployees;\n"]},"metadata":{},"sourceType":"module"}