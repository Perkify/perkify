{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/createGroup/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts\";\nimport React, { useContext, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\nimport { allPerks, allPerksDict } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateGroup = props => {\n  _s();\n\n  const [availablePerks, setAvailablePerks] = useState(allPerks.map(perkObj => perkObj.Name));\n  const [numPeople, setNumPeople] = useState(0);\n  const [costPerPerson, setCostPerPerson] = useState(0);\n  const [totalCost, setTotalCost] = useState(0);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [groupName, setGroupName] = useState(\"\");\n  const [emails, setEmails] = useState(\"\");\n  const [selectedPerks, setSelectedPerks] = useState([]);\n  const [groupNameError, setGroupNameError] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handlePerkChange = event => {\n    // update the controlled form\n    const perks = event.target.value;\n    setSelectedPerksError(\"\");\n    setSelectedPerks(perks);\n    let cost = 0;\n    perks.forEach(perk => {\n      cost += allPerksDict[perk][\"Cost\"];\n    });\n    setCostPerPerson(cost);\n    setTotalCost(cost * numPeople);\n  };\n\n  const handleEmailError = event => {\n    setEmails(event.target.value);\n\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input at least one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const handleEmailChange = event => {\n    handleEmailError(event);\n    let tmpNumPeople = numPeople;\n\n    if (event.target.value === \"\") {\n      // if empty, set num people to 0\n      tmpNumPeople = 0;\n    } else if (!validateEmails(event.target.value)) {// if error, leave it the same as it was before\n      // user is typing\n    } else {\n      // if not error, update the number of people\n      const emails = event.target.value.replace(/[,'\"]+/gi, \" \").split(/\\s+/);\n      tmpNumPeople = emails.length;\n    } // update the number of people and total cost\n\n\n    setNumPeople(tmpNumPeople);\n    setTotalCost(tmpNumPeople * costPerPerson);\n  };\n\n  const createPerkGroup = e => {\n    e.preventDefault();\n    let error = false;\n\n    if (groupName == \"\") {\n      setGroupNameError(\"Enter a group name\");\n      error = true;\n    }\n\n    if (emails == \"\") {\n      setEmailsError(\"Please input at least one email\");\n      error = true;\n    } else if (!validateEmails(emails)) {\n      setEmailsError(\"Please input proper emails\");\n      error = true;\n    }\n\n    if (selectedPerks.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n\n    if (!error) {\n      console.log(\"No errors\");\n      const emailList = emails.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n        console.log(bearerToken); // call the api to create the group\n\n        PerkifyApi.post(\"user/auth/createGroup\", {\n          group: groupName,\n          emails: emailList,\n          perks: selectedPerks\n        }, {\n          headers: {\n            Authorization: `Bearer ${bearerToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(() => {\n          propshistory.push(`/dashboard/group/${groupName}`);\n        }).catch(err => {\n          console.log(err);\n        });\n      })();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Create Group\",\n      crumbs: [\"Dashboard\", \"Perk Groups\", \"Create Group\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: 700,\n        padding: 30,\n        marginTop: 30\n      },\n      elevation: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: \"Group Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"group_name\",\n        variant: \"outlined\",\n        label: \"Group Name\",\n        placeholder: \"Cole's Group\",\n        value: groupName,\n        onChange: event => {\n          setGroupName(event.target.value);\n          setGroupNameError(\"\");\n        },\n        fullWidth: true,\n        error: groupNameError != \"\",\n        helperText: groupNameError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginTop: \"30px\",\n          marginBottom: \"15px\"\n        },\n        children: \"Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"emailaddresses\",\n        variant: \"outlined\",\n        label: \"\",\n        placeholder: \"Insert emails separated by commas or newlines\",\n        value: emails,\n        onChange: handleEmailChange,\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        rowsMax: 4,\n        error: emailsError != \"\",\n        helperText: emailsError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginTop: \"30px\",\n          marginBottom: \"15px\"\n        },\n        children: \"Perks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"demo-simple-select-label\",\n        id: \"demo-simple-select\",\n        displayEmpty: true,\n        renderValue: selected => {\n          if (selected.length === 0) {\n            return \"Select Perks\";\n          }\n\n          return selected.join(\", \");\n        },\n        variant: \"outlined\",\n        value: selectedPerks,\n        multiple: true,\n        fullWidth: true,\n        label: \"Select Group\",\n        placeholder: \"Select Gruop\",\n        onChange: handlePerkChange,\n        error: selectedPerksError != \"\",\n        children: availablePerks.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: name,\n          children: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginTop: \"30px\",\n          marginBottom: \"15px\"\n        },\n        children: [\"Estimated Cost: $\", totalCost]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: createPerkGroup,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Create Perk Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateGroup, \"vz0k9pFmYmOy8uXAssR53pAapAA=\");\n\n_c = CreateGroup;\nexport default CreateGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateGroup\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/createGroup/index.tsx"],"names":["Button","Card","MenuItem","Select","TextField","Typography","Header","AuthContext","React","useContext","useState","PerkifyApi","validateEmails","allPerks","allPerksDict","CreateGroup","props","availablePerks","setAvailablePerks","map","perkObj","Name","numPeople","setNumPeople","costPerPerson","setCostPerPerson","totalCost","setTotalCost","currentUser","groupName","setGroupName","emails","setEmails","selectedPerks","setSelectedPerks","groupNameError","setGroupNameError","emailsError","setEmailsError","selectedPerksError","setSelectedPerksError","handlePerkChange","event","perks","target","value","cost","forEach","perk","handleEmailError","handleEmailChange","tmpNumPeople","replace","split","length","createPerkGroup","e","preventDefault","error","console","log","emailList","bearerToken","getIdToken","post","group","headers","Authorization","then","propshistory","push","catch","err","width","padding","marginTop","marginBottom","selected","join","name"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Card,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts\";\nimport React, { useContext, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\nimport { allPerks, allPerksDict } from \"../../constants\";\n\nconst CreateGroup = (props) => {\n  const [availablePerks, setAvailablePerks] = useState(\n    allPerks.map((perkObj) => perkObj.Name)\n  );\n  const [numPeople, setNumPeople] = useState(0);\n  const [costPerPerson, setCostPerPerson] = useState(0);\n  const [totalCost, setTotalCost] = useState(0);\n  const { currentUser } = useContext(AuthContext);\n\n  const [groupName, setGroupName] = useState(\"\");\n  const [emails, setEmails] = useState(\"\");\n  const [selectedPerks, setSelectedPerks] = useState([]);\n\n  const [groupNameError, setGroupNameError] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handlePerkChange = (event) => {\n    // update the controlled form\n    const perks = event.target.value as string[];\n\n    setSelectedPerksError(\"\");\n\n    setSelectedPerks(perks);\n\n    let cost = 0;\n    perks.forEach((perk) => {\n      cost += allPerksDict[perk][\"Cost\"];\n    });\n    setCostPerPerson(cost);\n    setTotalCost(cost * numPeople);\n  };\n\n  const handleEmailError = (event) => {\n    setEmails(event.target.value);\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input at least one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const handleEmailChange = (event) => {\n    handleEmailError(event);\n    let tmpNumPeople = numPeople;\n    if (event.target.value === \"\") {\n      // if empty, set num people to 0\n      tmpNumPeople = 0;\n    } else if (!validateEmails(event.target.value)) {\n      // if error, leave it the same as it was before\n      // user is typing\n    } else {\n      // if not error, update the number of people\n      const emails = event.target.value.replace(/[,'\"]+/gi, \" \").split(/\\s+/);\n      tmpNumPeople = emails.length;\n    }\n    // update the number of people and total cost\n    setNumPeople(tmpNumPeople);\n    setTotalCost(tmpNumPeople * costPerPerson);\n  };\n\n  const createPerkGroup = (e) => {\n    e.preventDefault();\n    let error = false;\n\n    if (groupName == \"\") {\n      setGroupNameError(\"Enter a group name\");\n      error = true;\n    }\n\n    if (emails == \"\") {\n      setEmailsError(\"Please input at least one email\");\n      error = true;\n    } else if (!validateEmails(emails)) {\n      setEmailsError(\"Please input proper emails\");\n      error = true;\n    }\n\n    if (selectedPerks.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n\n    if (!error) {\n      console.log(\"No errors\");\n      const emailList = emails.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n        console.log(bearerToken);\n        // call the api to create the group\n        PerkifyApi.post(\n          \"user/auth/createGroup\",\n          {\n            group: groupName,\n            emails: emailList,\n            perks: selectedPerks,\n          },\n\n          {\n            headers: {\n              Authorization: `Bearer ${bearerToken}`,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        )\n          .then(() => {\n            propshistory.push(`/dashboard/group/${groupName}`);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      })();\n    }\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Create Group\"\n        crumbs={[\"Dashboard\", \"Perk Groups\", \"Create Group\"]}\n      />\n\n      <Card style={{ width: 700, padding: 30, marginTop: 30 }} elevation={4}>\n        {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Create a perk group\n          </Typography> */}\n        <Typography style={{ marginBottom: \"15px\" }}>Group Name</Typography>\n        <TextField\n          id=\"group_name\"\n          variant=\"outlined\"\n          label=\"Group Name\"\n          placeholder=\"Cole's Group\"\n          value={groupName}\n          onChange={(event) => {\n            setGroupName(event.target.value);\n            setGroupNameError(\"\");\n          }}\n          fullWidth\n          error={groupNameError != \"\"}\n          helperText={groupNameError}\n        />\n        <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n          Emails\n        </Typography>\n        <TextField\n          id=\"emailaddresses\"\n          variant=\"outlined\"\n          label=\"\"\n          placeholder=\"Insert emails separated by commas or newlines\"\n          value={emails}\n          onChange={handleEmailChange}\n          fullWidth\n          multiline\n          rows={4}\n          rowsMax={4}\n          error={emailsError != \"\"}\n          helperText={emailsError}\n        />\n        <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n          Perks\n        </Typography>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          displayEmpty\n          renderValue={(selected) => {\n            if ((selected as string[]).length === 0) {\n              return \"Select Perks\";\n            }\n\n            return (selected as string[]).join(\", \");\n          }}\n          variant=\"outlined\"\n          value={selectedPerks}\n          multiple\n          fullWidth\n          label=\"Select Group\"\n          placeholder=\"Select Gruop\"\n          onChange={handlePerkChange}\n          error={selectedPerksError != \"\"}\n        >\n          {availablePerks.map((name) => (\n            <MenuItem value={name} key={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n        {/* {selectedGroupError != \"\" && (\n          <FormHelperText>{selectedGroupError}</FormHelperText>\n        )} */}\n\n        <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n          Estimated Cost: ${totalCost}\n        </Typography>\n        <Button onClick={createPerkGroup} variant=\"contained\" color=\"primary\">\n          Create Perk Group\n        </Button>\n      </Card>\n    </>\n  );\n};\n\nexport default CreateGroup;\n"]},"metadata":{},"sourceType":"module"}