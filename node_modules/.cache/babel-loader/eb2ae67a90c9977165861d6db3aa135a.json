{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/manageGroups/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid } from \"@material-ui/core\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { allPerksDict } from \"../../constants\";\nimport AddPerks from \"./AddPerks\";\nimport RemovePerks from \"./RemovePerks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300,\n  editable: false\n}];\nconst perkColumns = [{\n  field: \"Name\",\n  headerName: \"Perk Name\",\n  width: 150,\n  editable: false\n}, {\n  field: \"Cost\",\n  headerName: \"Cost\",\n  width: 150,\n  editable: false\n}, {\n  field: \"Period\",\n  headerName: \"Period\",\n  width: 150,\n  editable: false\n}];\nexport default function ManageGroups() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [peopleData, setPeopleData] = useState([]);\n  const [isRemoveEmployeesModalVisible, setIsRemoveEmployeesModalVisible] = useState(false);\n  const [isAddEmployeesModalVisible, setIsAddEmployeesModalVisible] = useState(false);\n  const [isRemovePerksModalVisible, setIsRemovePerksModalVisible] = useState(false);\n  const [isAddPerksModalVisible, setIsAddPerksModalVisible] = useState(false);\n  const [selectedPerks, setSelectedPerks] = useState([]);\n  const [groupPerks, setPerksData] = useState([]);\n\n  function getPerkNames(perks) {\n    const retNames = perks.map(perk => {\n      retNames.push(perk.Name);\n    });\n    return retNames;\n  }\n\n  let groupData = [];\n  const fillerGroupData = [{\n    name: \"A\",\n    id: \"abc123\"\n  }, {\n    name: \"B\",\n    id: \"abc133\"\n  }];\n\n  function getGroupData() {\n    //TO IMPLEMENT\n    groupData = fillerGroupData;\n  }\n\n  const [useEffectComplete, setUseEffectComplete] = useState(false);\n  const [groupEmails, setEmails] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  getGroupData();\n  useEffect(() => {\n    console.log(\"ran\");\n    var db = firebase.firestore();\n    db.collection(\"admins\").doc(currentUser.uid).get().then(doc => {\n      const adminDoc = doc.data();\n\n      if (adminDoc) {\n        //   console.log(\"Document data:\", doc.data());\n        let businessId = adminDoc[\"companyID\"];\n        db.collection(\"businesses\").doc(businessId).get().then(doc => {\n          const businessDoc = doc.data();\n\n          if (businessDoc) {\n            console.log(businessDoc.groups);\n            setViewWithPerksData(businessDoc.groups[id]);\n            setUseEffectComplete(true);\n          }\n        });\n        db.collection(\"users\").where(\"businessID\", \"==\", businessId).where(\"group\", \"==\", id).get().then(querySnapshot => {\n          setEmails(querySnapshot.docs.map((doc, index) => ({\n            email: doc.id,\n            id: index\n          })));\n        }).catch(error => {\n          console.log(\"Error getting documents: \", error);\n        }); // doc.data() will be undefined in this case\n\n        console.log(\"No such document!\");\n      }\n    }).catch(error => {\n      console.log(\"Error getting document:\", error);\n    });\n  }, [id]);\n\n  function getRemovedPerks() {\n    const removedPerks = selectedPerks.map(index => {\n      console.log(index);\n      removedPerks.push(groupPerks[index]);\n    });\n    console.log(removedPerks);\n    return removedPerks;\n  }\n\n  function setViewWithPerksData(perkData) {\n    //TO IMPLEMENT randomPerks => actual perks of the selected group\n    console.log(perkData);\n    const ret = perkData.map(perk => allPerksDict[perk]);\n    var index = 0;\n    ret.forEach(perk => {\n      perk[\"id\"] = index;\n      index += 1;\n    });\n    console.log(ret);\n    setPerksData(ret);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Manage Perk Groups\",\n      crumbs: [\"Dashboard\", \"Perk Groups\", \"Cole's Group\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n          rows: groupPerks,\n          height: 600,\n          columns: perkColumns,\n          setSelected: setSelectedPerks,\n          onClickAdd: () => {\n            setIsAddPerksModalVisible(true);\n          },\n          onClickDelete: () => {\n            setIsRemovePerksModalVisible(true);\n          },\n          tableName: \"Group Perks\",\n          addButtonText: \"Add Group Perk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n          height: 600,\n          rows: groupEmails,\n          columns: columns,\n          setSelected: setSelectedPerks,\n          onClickAdd: () => {\n            setIsAddEmployeesModalVisible(true);\n          },\n          onClickDelete: () => {\n            setIsRemoveEmployeesModalVisible(true);\n          },\n          tableName: \"Group Employees\",\n          addButtonText: \"Add Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isRemoveEmployeesModalVisible,\n      onClose: () => setIsRemoveEmployeesModalVisible(false),\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Delete Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete these users? This cannot be undone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveEmployeesModalVisible(false),\n          color: \"primary\",\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveEmployeesModalVisible(false),\n          color: \"primary\",\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddPerks, {\n      isAddPerksModalVisible: isAddPerksModalVisible,\n      setIsAddPerksModalVisible: setIsAddPerksModalVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RemovePerks, {\n      isRemovePerksModalVisible: isRemovePerksModalVisible,\n      setIsRemovePerksModalVisible: setIsRemovePerksModalVisible,\n      selectedPerks: selectedPerks,\n      setSelectedPerks: setSelectedPerks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ManageGroups, \"Ryc4s6tXayHO3HAaX2QucdjDaUA=\", false, function () {\n  return [useParams];\n});\n\n_c = ManageGroups;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageGroups\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/manageGroups/index.tsx"],"names":["Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Grid","AddRemoveTable","Header","AuthContext","firebase","React","useContext","useEffect","useState","useParams","allPerksDict","AddPerks","RemovePerks","columns","field","headerName","width","editable","perkColumns","ManageGroups","id","peopleData","setPeopleData","isRemoveEmployeesModalVisible","setIsRemoveEmployeesModalVisible","isAddEmployeesModalVisible","setIsAddEmployeesModalVisible","isRemovePerksModalVisible","setIsRemovePerksModalVisible","isAddPerksModalVisible","setIsAddPerksModalVisible","selectedPerks","setSelectedPerks","groupPerks","setPerksData","getPerkNames","perks","retNames","map","perk","push","Name","groupData","fillerGroupData","name","getGroupData","useEffectComplete","setUseEffectComplete","groupEmails","setEmails","currentUser","console","log","db","firestore","collection","doc","uid","get","then","adminDoc","data","businessId","businessDoc","groups","setViewWithPerksData","where","querySnapshot","docs","index","email","catch","error","getRemovedPerks","removedPerks","perkData","ret","forEach"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n} from \"@material-ui/core\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { allPerksDict } from \"../../constants\";\nimport AddPerks from \"./AddPerks\";\nimport RemovePerks from \"./RemovePerks\";\n\nconst columns = [\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    width: 300,\n    editable: false,\n  },\n];\n\nconst perkColumns = [\n  {\n    field: \"Name\",\n    headerName: \"Perk Name\",\n    width: 150,\n    editable: false,\n  },\n  {\n    field: \"Cost\",\n    headerName: \"Cost\",\n    width: 150,\n    editable: false,\n  },\n  {\n    field: \"Period\",\n    headerName: \"Period\",\n    width: 150,\n    editable: false,\n  },\n];\n\nexport default function ManageGroups() {\n  let { id } = useParams();\n\n  const [peopleData, setPeopleData] = useState([]);\n\n  const [isRemoveEmployeesModalVisible, setIsRemoveEmployeesModalVisible] =\n    useState(false);\n  const [isAddEmployeesModalVisible, setIsAddEmployeesModalVisible] =\n    useState(false);\n\n  const [isRemovePerksModalVisible, setIsRemovePerksModalVisible] =\n    useState(false);\n  const [isAddPerksModalVisible, setIsAddPerksModalVisible] = useState(false);\n\n  const [selectedPerks, setSelectedPerks] = useState([]);\n  const [groupPerks, setPerksData] = useState([]);\n\n  function getPerkNames(perks) {\n    const retNames = perks.map((perk) => {\n      retNames.push(perk.Name);\n    });\n\n    return retNames;\n  }\n\n  let groupData: any[] = [];\n  const fillerGroupData = [\n    {\n      name: \"A\",\n      id: \"abc123\",\n    },\n    {\n      name: \"B\",\n      id: \"abc133\",\n    },\n  ];\n\n  function getGroupData() {\n    //TO IMPLEMENT\n    groupData = fillerGroupData;\n  }\n\n  const [useEffectComplete, setUseEffectComplete] = useState(false);\n  const [groupEmails, setEmails] = useState([]);\n  const { currentUser } = useContext(AuthContext);\n\n  getGroupData();\n\n  useEffect(() => {\n    console.log(\"ran\");\n    var db = firebase.firestore();\n    db.collection(\"admins\")\n      .doc(currentUser.uid)\n      .get()\n      .then((doc) => {\n        const adminDoc = doc.data();\n        if (adminDoc) {\n          //   console.log(\"Document data:\", doc.data());\n          let businessId = adminDoc[\"companyID\"];\n          db.collection(\"businesses\")\n            .doc(businessId)\n            .get()\n            .then((doc) => {\n              const businessDoc = doc.data();\n              if (businessDoc) {\n                console.log(businessDoc.groups);\n\n                setViewWithPerksData(businessDoc.groups[id]);\n                setUseEffectComplete(true);\n              }\n            });\n\n          db.collection(\"users\")\n            .where(\"businessID\", \"==\", businessId)\n            .where(\"group\", \"==\", id)\n            .get()\n            .then((querySnapshot) => {\n              setEmails(\n                querySnapshot.docs.map((doc, index) => ({\n                  email: doc.id,\n                  id: index,\n                }))\n              );\n            })\n            .catch((error) => {\n              console.log(\"Error getting documents: \", error);\n            });\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error getting document:\", error);\n      });\n  }, [id]);\n\n  function getRemovedPerks() {\n    const removedPerks = selectedPerks.map((index) => {\n      console.log(index);\n      removedPerks.push(groupPerks[index]);\n    });\n    console.log(removedPerks);\n    return removedPerks;\n  }\n\n  function setViewWithPerksData(perkData) {\n    //TO IMPLEMENT randomPerks => actual perks of the selected group\n    console.log(perkData);\n    const ret = perkData.map((perk) => allPerksDict[perk]);\n    var index = 0;\n    ret.forEach((perk) => {\n      perk[\"id\"] = index;\n      index += 1;\n    });\n    console.log(ret);\n    setPerksData(ret);\n  }\n\n  return (\n    <>\n      <Header\n        title=\"Manage Perk Groups\"\n        crumbs={[\"Dashboard\", \"Perk Groups\", \"Cole's Group\"]}\n      />\n\n      <Grid container spacing={5}>\n        <Grid item sm={6} xs={12}>\n          <AddRemoveTable\n            rows={groupPerks}\n            height={600}\n            columns={perkColumns}\n            setSelected={setSelectedPerks}\n            onClickAdd={() => {\n              setIsAddPerksModalVisible(true);\n            }}\n            onClickDelete={() => {\n              setIsRemovePerksModalVisible(true);\n            }}\n            tableName=\"Group Perks\"\n            addButtonText=\"Add Group Perk\"\n          />\n        </Grid>\n        <Grid item sm={6} xs={12}>\n          <AddRemoveTable\n            height={600}\n            rows={groupEmails}\n            columns={columns}\n            setSelected={setSelectedPerks}\n            onClickAdd={() => {\n              setIsAddEmployeesModalVisible(true);\n            }}\n            onClickDelete={() => {\n              setIsRemoveEmployeesModalVisible(true);\n            }}\n            tableName=\"Group Employees\"\n            addButtonText=\"Add Employees\"\n          />\n        </Grid>\n      </Grid>\n\n      <Dialog\n        open={isRemoveEmployeesModalVisible}\n        onClose={() => setIsRemoveEmployeesModalVisible(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Delete Users</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete these users? This cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => setIsRemoveEmployeesModalVisible(false)}\n            color=\"primary\"\n          >\n            No\n          </Button>\n          <Button\n            onClick={() => setIsRemoveEmployeesModalVisible(false)}\n            color=\"primary\"\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <AddPerks\n        isAddPerksModalVisible={isAddPerksModalVisible}\n        setIsAddPerksModalVisible={setIsAddPerksModalVisible}\n      />\n      <RemovePerks\n        isRemovePerksModalVisible={isRemovePerksModalVisible}\n        setIsRemovePerksModalVisible={setIsRemovePerksModalVisible}\n        selectedPerks={selectedPerks}\n        setSelectedPerks={setSelectedPerks}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}