{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/dashboard/GeneralDashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { allPerksDict } from \"../../constants\";\nimport BChart from \"./BarChart\";\nimport MetricCard from \"./MetricCard\";\nimport PChart from \"./piechart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeneralDashboard = () => {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  var [employees, setEmployees] = useState([]);\n  var [groups, setGroups] = useState({});\n  var [selectedGroup, setSelectedGroup] = useState(\"All Groups\");\n\n  function roundNumber(num) {\n    return Math.round(10 * num) / 10;\n  }\n\n  function convertGroups() {\n    let retArr = Object.keys(groups);\n    retArr.push(\"All Groups\");\n    return retArr;\n  }\n\n  function calculatePieData() {\n    // Returns pie chart data \n    let tempDict = {};\n    employees.forEach(employee => {\n      //Looks through each employee to get total costs per perk \n      let group = employee[\"group\"];\n\n      if (groups[group] === undefined) {\n        return 0;\n      }\n\n      groups[group].forEach(perk => {\n        if (perk in tempDict) {\n          tempDict[perk] += allPerksDict[perk].Cost;\n        } else {\n          tempDict[perk] = allPerksDict[perk].Cost;\n        }\n      });\n    });\n    let data = [];\n    let totalValue = 0;\n    Object.keys(tempDict).forEach(perk => {\n      //Creates arra\n      let newRow = {\n        name: perk,\n        value: tempDict[perk]\n      };\n      totalValue = totalValue + tempDict[perk];\n      data.push(newRow);\n    });\n    let totalPercentage = 100; //Rounds number if all values don't add up to 100\n\n    data.forEach(perkObj => {\n      perkObj.value = roundNumber(perkObj.value / totalValue * 100);\n      totalPercentage -= perkObj.value;\n\n      if (totalPercentage < 0) {\n        perkObj.value -= totalPercentage * -1;\n      }\n    });\n    return data;\n  }\n\n  function calculateTotalCost() {\n    let totalCost = 0;\n    let groupCost = {};\n    employees.forEach(employee => {\n      let cost = 0;\n      let group = employee[\"group\"];\n\n      if (groups[group] === undefined) {\n        return 0;\n      }\n\n      groups[group].forEach(perk => {\n        cost += allPerksDict[perk].Cost;\n      });\n      totalCost += cost;\n    });\n    return totalCost;\n  }\n\n  function calculatePerksOffered() {\n    let perks = new Set([]);\n    Object.keys(groups).forEach(group => {\n      groups[group].forEach(perk => {\n        perks.add(perk);\n      });\n    });\n    return perks.size;\n  }\n\n  function calculateBarGraphData() {\n    let retData = [];\n    let tempDict = {};\n    employees.forEach(employee => {\n      let group = employee[\"group\"];\n\n      if (selectedGroup != \"All Groups\") {\n        if (group !== selectedGroup) {\n          return 0;\n        }\n      }\n\n      if (groups[group] === undefined) {\n        return 0;\n      }\n\n      groups[group].forEach(perk => {\n        if (perk in tempDict) {\n          tempDict[perk] += allPerksDict[perk].Cost;\n        } else {\n          tempDict[perk] = allPerksDict[perk].Cost;\n        }\n      });\n    });\n    Object.keys(tempDict).forEach(perk => {\n      let newRow = {\n        name: perk,\n        unspent: tempDict[perk],\n        spent: 0\n      };\n      retData.push(newRow);\n    });\n    return retData;\n  }\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\").doc(currentUser.uid).get().then(doc => {\n      const userData = doc.data();\n\n      if (userData) {\n        const businessId = userData[\"companyID\"];\n        db.collection(\"users\").where(\"businessID\", \"==\", businessId).get().then(querySnapshot => {\n          const people = querySnapshot.docs.map((doc, index) => ({\n            email: doc.id,\n            id: index,\n            group: doc.data()[\"group\"],\n            perks: doc.data()[\"perks\"]\n          }));\n          db.collection(\"businesses\").doc(businessId).get().then(doc => {\n            const businessDoc = doc.data();\n\n            if (businessDoc) {\n              setEmployees(people);\n              setGroups(businessDoc.groups);\n            }\n          });\n        }).catch(error => {\n          alert(error);\n        });\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch(error => {\n      console.log(\"Error getting document:\", error);\n    });\n  }, []);\n\n  function handleGroupChange(event) {\n    setSelectedGroup(event.target.value[1]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Dashboard\",\n      crumbs: [\"General dashboard\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Cost Per Employee\",\n          number: \"$\" + roundNumber(calculateTotalCost() / employees.length),\n          icon: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/undraw_Investing.svg\",\n            style: {\n              height: \"70px\",\n              marginLeft: \"auto\",\n              display: \"block\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Number of Employees\",\n          number: employees.length,\n          icon: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/undraw_Appreciation.svg\",\n            style: {\n              height: \"70px\",\n              marginLeft: \"auto\",\n              display: \"block\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Total Perks Offered\",\n          number: calculatePerksOffered(),\n          icon: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/undraw_Gifts.svg\",\n            style: {\n              height: \"70px\",\n              marginLeft: \"auto\",\n              display: \"block\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: \"100%\",\n            padding: 10,\n            height: \"500px\",\n            display: \"flex\",\n            flexFlow: \"column\"\n          },\n          elevation: 4,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            style: {\n              height: \"80px\",\n              padding: \"15px\",\n              fontWeight: \"bold\"\n            },\n            children: \"Perks Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: \"400px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(PChart, {\n              data: calculatePieData()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: \"100%\",\n            padding: 10,\n            height: \"500px\"\n          },\n          elevation: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"100%\",\n              height: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                style: {\n                  height: \"80px\",\n                  padding: \"15px\",\n                  fontWeight: \"bold\"\n                },\n                children: \"Perks Spending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginLeft: \"auto\"\n                },\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"demo-simple-select-label\",\n                  id: \"demo-simple-select\",\n                  displayEmpty: true,\n                  variant: \"outlined\",\n                  value: [selectedGroup],\n                  onChange: handleGroupChange,\n                  multiple: true,\n                  fullWidth: true,\n                  label: \"Select Group\",\n                  placeholder: \"Select Gruop\",\n                  children: convertGroups().map(group => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: group,\n                    children: group\n                  }, group, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(BChart, {\n              data: calculateBarGraphData()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GeneralDashboard, \"1nRVn4nFNiB+mOwm8A4o9fedXQc=\");\n\n_c = GeneralDashboard;\nexport default GeneralDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeneralDashboard\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/dashboard/GeneralDashboard.tsx"],"names":["Card","MenuItem","Select","Typography","Grid","Header","AuthContext","firebase","React","useContext","useEffect","useState","allPerksDict","BChart","MetricCard","PChart","GeneralDashboard","currentUser","employees","setEmployees","groups","setGroups","selectedGroup","setSelectedGroup","roundNumber","num","Math","round","convertGroups","retArr","Object","keys","push","calculatePieData","tempDict","forEach","employee","group","undefined","perk","Cost","data","totalValue","newRow","name","value","totalPercentage","perkObj","calculateTotalCost","totalCost","groupCost","cost","calculatePerksOffered","perks","Set","add","size","calculateBarGraphData","retData","unspent","spent","db","firestore","collection","doc","uid","get","then","userData","businessId","where","querySnapshot","people","docs","map","index","email","id","businessDoc","catch","error","alert","console","log","handleGroupChange","event","target","length","height","marginLeft","display","width","padding","flexFlow","fontWeight","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import { Card, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { allPerksDict } from \"../../constants\";\nimport BChart from \"./BarChart\";\nimport MetricCard from \"./MetricCard\";\nimport PChart from \"./piechart\";\n\nconst GeneralDashboard = () => {\n  const { currentUser } = useContext(AuthContext);\n\n  var [employees, setEmployees] = useState([]);\n  var [groups, setGroups] = useState({});\n  var [selectedGroup, setSelectedGroup] = useState(\"All Groups\");\n\n  function roundNumber(num) {\n    return Math.round(10 * num) / 10;\n  }\n\n  function convertGroups() {\n    let retArr = Object.keys(groups);\n    retArr.push(\"All Groups\");\n    return retArr;\n  }\n\n  function calculatePieData() { // Returns pie chart data \n    let tempDict = {};\n    employees.forEach((employee) => { //Looks through each employee to get total costs per perk \n      let group = employee[\"group\"];\n      if (groups[group] === undefined) {\n        return 0;\n      }\n      groups[group].forEach((perk) => {\n        if (perk in tempDict) {\n          tempDict[perk] += allPerksDict[perk].Cost;\n        } else {\n          tempDict[perk] = allPerksDict[perk].Cost;\n        }\n      });\n    });\n    let data = [];\n    let totalValue = 0;\n    Object.keys(tempDict).forEach((perk) => { //Creates arra\n      let newRow = { name: perk, value: tempDict[perk] };\n      totalValue = totalValue + tempDict[perk];\n      data.push(newRow);\n    });\n    let totalPercentage = 100; //Rounds number if all values don't add up to 100\n    data.forEach((perkObj) => {\n      perkObj.value = roundNumber((perkObj.value / totalValue) * 100);\n      totalPercentage -= perkObj.value;\n      if (totalPercentage < 0) {\n        perkObj.value -= totalPercentage * -1;\n      }\n    });\n    return data;\n  }\n\n  function calculateTotalCost() {\n    let totalCost = 0;\n\n    let groupCost = {};\n    employees.forEach((employee) => {\n      let cost = 0;\n      let group = employee[\"group\"];\n      if (groups[group] === undefined) {\n        return 0;\n      }\n      groups[group].forEach((perk) => {\n        cost += allPerksDict[perk].Cost;\n      });\n      totalCost += cost;\n    });\n    return totalCost;\n  }\n\n  function calculatePerksOffered() {\n    let perks = new Set([]);\n    Object.keys(groups).forEach((group) => {\n      groups[group].forEach((perk) => {\n        perks.add(perk);\n      });\n    });\n    return perks.size;\n  }\n\n  function calculateBarGraphData() {\n    let retData = [];\n    let tempDict = {};\n    employees.forEach((employee) => {\n      let group = employee[\"group\"];\n      if (selectedGroup != \"All Groups\") {\n        if (group !== selectedGroup) {\n          return 0;\n        }\n      }\n      if (groups[group] === undefined) {\n        return 0;\n      }\n      groups[group].forEach((perk) => {\n        if (perk in tempDict) {\n          tempDict[perk] += allPerksDict[perk].Cost;\n        } else {\n          tempDict[perk] = allPerksDict[perk].Cost;\n        }\n      });\n    });\n    Object.keys(tempDict).forEach((perk) => {\n      let newRow = { name: perk, unspent: tempDict[perk], spent: 0 };\n      retData.push(newRow);\n    });\n\n    return retData;\n  }\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\")\n      .doc(currentUser.uid)\n      .get()\n      .then((doc) => {\n        const userData = doc.data();\n        if (userData) {\n          const businessId = userData[\"companyID\"];\n\n          db.collection(\"users\")\n            .where(\"businessID\", \"==\", businessId)\n            .get()\n            .then((querySnapshot) => {\n              const people = querySnapshot.docs.map((doc, index) => ({\n                email: doc.id,\n                id: index,\n                group: doc.data()[\"group\"],\n                perks: doc.data()[\"perks\"],\n              }));\n              db.collection(\"businesses\")\n                .doc(businessId)\n                .get()\n                .then((doc) => {\n                  const businessDoc = doc.data();\n                  if (businessDoc) {\n                    setEmployees(people);\n                    setGroups(businessDoc.groups);\n                  }\n                });\n            })\n            .catch((error) => {\n              alert(error);\n            });\n        } else {\n          console.log(\"No such document!\");\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error getting document:\", error);\n      });\n  }, []);\n\n  function handleGroupChange(event) {\n    setSelectedGroup(event.target.value[1]);\n  }\n\n  return (\n    <div>\n      <Header title=\"Dashboard\" crumbs={[\"General dashboard\"]} />\n      <Grid container spacing={4}>\n        <Grid item xs={4}>\n          <MetricCard\n            title={\"Cost Per Employee\"}\n            number={\"$\" + roundNumber(calculateTotalCost() / employees.length)}\n            icon={\n              <img\n                src=\"/images/undraw_Investing.svg\"\n                style={{ height: \"70px\", marginLeft: \"auto\", display: \"block\" }}\n              />\n            }\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <MetricCard\n            title={\"Number of Employees\"}\n            number={employees.length}\n            icon={\n              <img\n                src=\"/images/undraw_Appreciation.svg\"\n                style={{ height: \"70px\", marginLeft: \"auto\", display: \"block\" }}\n              />\n            }\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <MetricCard\n            title={\"Total Perks Offered\"}\n            number={calculatePerksOffered()}\n            icon={\n              <img\n                src=\"/images/undraw_Gifts.svg\"\n                style={{ height: \"70px\", marginLeft: \"auto\", display: \"block\" }}\n              />\n            }\n          ></MetricCard>\n        </Grid>\n        <Grid item xs={4}>\n          <Card\n            style={{\n              width: \"100%\",\n              padding: 10,\n              height: \"500px\",\n              display: \"flex\",\n              flexFlow: \"column\",\n            }}\n            elevation={4}\n          >\n            <Typography\n              variant=\"h6\"\n              style={{ height: \"80px\", padding: \"15px\", fontWeight: \"bold\" }}\n            >\n              Perks Distribution\n            </Typography>\n            <div style={{ height: \"400px\" }}>\n              <PChart data={calculatePieData()} />\n            </div>\n          </Card>\n        </Grid>\n        <Grid item xs={8}>\n          <Card\n            style={{ width: \"100%\", padding: 10, height: \"500px\" }}\n            elevation={4}\n          >\n            <div style={{ width: \"100%\", height: \"100%\" }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  style={{\n                    height: \"80px\",\n                    padding: \"15px\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Perks Spending\n                </Typography>\n\n                <div style={{ marginLeft: \"auto\" }}>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    displayEmpty\n                    variant=\"outlined\"\n                    value={[selectedGroup]}\n                    onChange={handleGroupChange}\n                    multiple\n                    fullWidth\n                    label=\"Select Group\"\n                    placeholder=\"Select Gruop\"\n                  >\n                    {convertGroups().map((group) => (\n                      <MenuItem value={group} key={group}>\n                        {group}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </div>\n              </div>\n              <BChart data={calculateBarGraphData()} />\n            </div>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default GeneralDashboard;\n"]},"metadata":{},"sourceType":"module"}