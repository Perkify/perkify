{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/manageGroups/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport Header from \"components/Header\";\nimport { AdminContext, BusinessContext } from \"contexts\";\nimport { AuthContext } from \"contexts/Auth\";\nimport { db } from \"firebaseApp\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { PerkifyApi } from \"services\";\nimport { allPerksDict } from \"../../constants\";\nimport AddEmployees from \"./AddEmployees\";\nimport AddPerks from \"./AddPerks\";\nimport RemoveEmployees from \"./RemoveEmployees\";\nimport RemovePerks from \"./RemovePerks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300,\n  editable: false\n}];\nconst perkColumns = [{\n  field: \"Name\",\n  headerName: \"Perk Name\",\n  width: 150,\n  editable: false\n}, {\n  field: \"Cost\",\n  headerName: \"Cost\",\n  width: 150,\n  editable: false\n}, {\n  field: \"Period\",\n  headerName: \"Period\",\n  width: 150,\n  editable: false\n}];\nexport default function ManageGroups(prop) {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [isRemoveEmployeesModalVisible, setIsRemoveEmployeesModalVisible] = useState(false);\n  const [isAddEmployeesModalVisible, setIsAddEmployeesModalVisible] = useState(false);\n  const [isRemovePerksModalVisible, setIsRemovePerksModalVisible] = useState(false);\n  const [isAddPerksModalVisible, setIsAddPerksModalVisible] = useState(false);\n  const [groupNotFound, setGroupNotFound] = useState(false);\n  const [selectedPerks, setSelectedPerks] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [groupPerks, setPerksData] = useState([]);\n  const [isDeletePerkGroupModalVisible, setIsDeletePerkGroupModalVisible] = useState(false);\n  const {\n    admin\n  } = useContext(AdminContext);\n  const {\n    business\n  } = useContext(BusinessContext);\n  const history = useHistory();\n\n  function getPerkNames(perks) {\n    const retNames = perks.map(perk => {\n      retNames.push(perk.Name);\n    });\n    return retNames;\n  }\n\n  let groupData = [];\n  const fillerGroupData = [{\n    name: \"A\",\n    id: \"abc123\"\n  }, {\n    name: \"B\",\n    id: \"abc133\"\n  }];\n\n  const deletePerkGroup = () => {\n    (async () => {\n      const bearerToken = await currentUser.getIdToken();\n      await PerkifyApi.post(\"user/auth/deletePerkGroup\", JSON.stringify({\n        group: id\n      }), {\n        headers: {\n          Authorization: `Bearer ${bearerToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      history.push(\"/dashboard\");\n    })();\n  };\n\n  const [groupEmails, setEmails] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  useEffect(() => {\n    if (Object.keys(admin).length != 0) {\n      // get list of emails that belong to the perk group\n      db.collection(\"users\").where(\"businessID\", \"==\", admin.companyID).where(\"group\", \"==\", id).get().then(querySnapshot => {\n        setEmails(querySnapshot.docs.map((doc, index) => ({\n          email: doc.id,\n          id: index\n        })));\n      }).catch(error => {\n        console.log(\"Error getting documents: \", error);\n      });\n    }\n  }, [admin, id]);\n  useEffect(() => {\n    if (Object.keys(business).length != 0) {\n      if (Object.keys(business.groups).includes(id)) {\n        setPerksData(business.groups[id].map((perk, index) => ({\n          id: index,\n          ...allPerksDict[perk]\n        })));\n        setGroupNotFound(false);\n      } else {\n        setGroupNotFound(true);\n      }\n    }\n  }, [business, id]);\n\n  if (groupNotFound) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Manage Perk Groups\",\n        crumbs: [\"Dashboard\", \"Perk Groups\", id]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          marginTop: \"100px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Perk Group Not Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          style: {\n            marginTop: \"20px\"\n          },\n          children: \"The perk group could not be found. Please email contact@getperkify.com if you think this is an error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Manage Perk Groups\",\n      crumbs: [\"Dashboard\", \"Perk Groups\", id],\n      button: {\n        type: \"delete\",\n        onClick: () => {\n          setIsDeletePerkGroupModalVisible(true);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n          rows: groupPerks,\n          height: 600,\n          columns: perkColumns,\n          setSelected: setSelectedPerks,\n          onClickAdd: () => {\n            setIsAddPerksModalVisible(true);\n          },\n          onClickDelete: () => {\n            setIsRemovePerksModalVisible(true);\n          },\n          tableName: \"Group Perks\",\n          addButtonText: \"Add Group Perk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n          height: 600,\n          rows: groupEmails,\n          columns: columns,\n          setSelected: setSelectedEmployees,\n          onClickAdd: () => {\n            setIsAddEmployeesModalVisible(true);\n          },\n          onClickDelete: () => {\n            setIsRemoveEmployeesModalVisible(true);\n          },\n          tableName: \"Group Employees\",\n          addButtonText: \"Add Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddEmployees, {\n      isAddEmployeesModalVisible: isAddEmployeesModalVisible,\n      setIsAddEmployeesModalVisible: setIsAddEmployeesModalVisible,\n      group: id,\n      employees: groupEmails,\n      selectedPerks: groupPerks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RemoveEmployees, {\n      isRemoveEmployeesModalVisible: isRemoveEmployeesModalVisible,\n      setIsRemoveEmployeesModalVisible: setIsRemoveEmployeesModalVisible,\n      selectedEmployees: selectedEmployees,\n      setSelectedEmployees: setSelectedEmployees\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddPerks, {\n      isAddPerksModalVisible: isAddPerksModalVisible,\n      setIsAddPerksModalVisible: setIsAddPerksModalVisible,\n      selectedPerks: groupPerks,\n      group: id,\n      emails: groupEmails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RemovePerks, {\n      isRemovePerksModalVisible: isRemovePerksModalVisible,\n      setIsRemovePerksModalVisible: setIsRemovePerksModalVisible,\n      selectedPerks: selectedPerks,\n      setSelectedPerks: setSelectedPerks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: isDeletePerkGroupModalVisible,\n      setIsModalVisible: setIsDeletePerkGroupModalVisible,\n      title: \"Delete Perk Group\",\n      description: \"Are you sure you want to delete this perk group and all of its employees? This cannot be undone.\",\n      onConfirmation: deletePerkGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ManageGroups, \"o5rW7Pii8F7xJd5I34Rp5VkS6qw=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ManageGroups;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageGroups\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/manageGroups/index.tsx"],"names":["Grid","Typography","AddRemoveTable","ConfirmationModal","Header","AdminContext","BusinessContext","AuthContext","db","React","useContext","useEffect","useState","useHistory","useParams","PerkifyApi","allPerksDict","AddEmployees","AddPerks","RemoveEmployees","RemovePerks","columns","field","headerName","width","editable","perkColumns","ManageGroups","prop","id","isRemoveEmployeesModalVisible","setIsRemoveEmployeesModalVisible","isAddEmployeesModalVisible","setIsAddEmployeesModalVisible","isRemovePerksModalVisible","setIsRemovePerksModalVisible","isAddPerksModalVisible","setIsAddPerksModalVisible","groupNotFound","setGroupNotFound","selectedPerks","setSelectedPerks","selectedEmployees","setSelectedEmployees","groupPerks","setPerksData","isDeletePerkGroupModalVisible","setIsDeletePerkGroupModalVisible","admin","business","history","getPerkNames","perks","retNames","map","perk","push","Name","groupData","fillerGroupData","name","deletePerkGroup","bearerToken","currentUser","getIdToken","post","JSON","stringify","group","headers","Authorization","groupEmails","setEmails","Object","keys","length","collection","where","companyID","get","then","querySnapshot","docs","doc","index","email","catch","error","console","log","groups","includes","marginTop","type","onClick"],"mappings":"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","sourcesContent":["import { Grid, Typography } from \"@material-ui/core\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport Header from \"components/Header\";\nimport { AdminContext, BusinessContext } from \"contexts\";\nimport { AuthContext } from \"contexts/Auth\";\nimport { db } from \"firebaseApp\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { PerkifyApi } from \"services\";\nimport { allPerksDict } from \"../../constants\";\nimport AddEmployees from \"./AddEmployees\";\nimport AddPerks from \"./AddPerks\";\nimport RemoveEmployees from \"./RemoveEmployees\";\nimport RemovePerks from \"./RemovePerks\";\n\nconst columns = [\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    width: 300,\n    editable: false,\n  },\n];\n\nconst perkColumns = [\n  {\n    field: \"Name\",\n    headerName: \"Perk Name\",\n    width: 150,\n    editable: false,\n  },\n  {\n    field: \"Cost\",\n    headerName: \"Cost\",\n    width: 150,\n    editable: false,\n  },\n  {\n    field: \"Period\",\n    headerName: \"Period\",\n    width: 150,\n    editable: false,\n  },\n];\n\nexport default function ManageGroups(prop) {\n  let { id } = useParams();\n\n  const [isRemoveEmployeesModalVisible, setIsRemoveEmployeesModalVisible] =\n    useState(false);\n  const [isAddEmployeesModalVisible, setIsAddEmployeesModalVisible] =\n    useState(false);\n\n  const [isRemovePerksModalVisible, setIsRemovePerksModalVisible] =\n    useState(false);\n  const [isAddPerksModalVisible, setIsAddPerksModalVisible] = useState(false);\n  const [groupNotFound, setGroupNotFound] = useState(false);\n\n  const [selectedPerks, setSelectedPerks] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [groupPerks, setPerksData] = useState([]);\n\n  const [isDeletePerkGroupModalVisible, setIsDeletePerkGroupModalVisible] =\n    useState(false);\n\n  const { admin } = useContext(AdminContext);\n  const { business } = useContext(BusinessContext);\n\n  const history = useHistory();\n\n  function getPerkNames(perks) {\n    const retNames = perks.map((perk) => {\n      retNames.push(perk.Name);\n    });\n\n    return retNames;\n  }\n\n  let groupData: any[] = [];\n  const fillerGroupData = [\n    {\n      name: \"A\",\n      id: \"abc123\",\n    },\n    {\n      name: \"B\",\n      id: \"abc133\",\n    },\n  ];\n\n  const deletePerkGroup = () => {\n    (async () => {\n      const bearerToken = await currentUser.getIdToken();\n\n      await PerkifyApi.post(\n        \"user/auth/deletePerkGroup\",\n        JSON.stringify({\n          group: id,\n        }),\n        {\n          headers: {\n            Authorization: `Bearer ${bearerToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      history.push(\"/dashboard\");\n    })();\n  };\n\n  const [groupEmails, setEmails] = useState([]);\n  const { currentUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    if (Object.keys(admin).length != 0) {\n      // get list of emails that belong to the perk group\n      db.collection(\"users\")\n        .where(\"businessID\", \"==\", admin.companyID)\n        .where(\"group\", \"==\", id)\n        .get()\n        .then((querySnapshot) => {\n          setEmails(\n            querySnapshot.docs.map((doc, index) => ({\n              email: doc.id,\n              id: index,\n            }))\n          );\n        })\n        .catch((error) => {\n          console.log(\"Error getting documents: \", error);\n        });\n    }\n  }, [admin, id]);\n\n  useEffect(() => {\n    if (Object.keys(business).length != 0) {\n      if (Object.keys(business.groups).includes(id)) {\n        setPerksData(\n          business.groups[id].map((perk, index) => ({\n            id: index,\n            ...allPerksDict[perk],\n          }))\n        );\n        setGroupNotFound(false);\n      } else {\n        setGroupNotFound(true);\n      }\n    }\n  }, [business, id]);\n\n  if (groupNotFound) {\n    return (\n      <>\n        <Header\n          title=\"Manage Perk Groups\"\n          crumbs={[\"Dashboard\", \"Perk Groups\", id]}\n        />\n        <div style={{ width: \"50%\", marginTop: \"100px\" }}>\n          <Typography variant=\"h2\">Perk Group Not Found</Typography>\n          <Typography variant=\"h5\" style={{ marginTop: \"20px\" }}>\n            The perk group could not be found. Please email\n            contact@getperkify.com if you think this is an error\n          </Typography>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header\n        title=\"Manage Perk Groups\"\n        crumbs={[\"Dashboard\", \"Perk Groups\", id]}\n        button={{\n          type: \"delete\",\n          onClick: () => {\n            setIsDeletePerkGroupModalVisible(true);\n          },\n        }}\n      />\n\n      <Grid container spacing={5}>\n        <Grid item sm={6} xs={12}>\n          <AddRemoveTable\n            rows={groupPerks}\n            height={600}\n            columns={perkColumns}\n            setSelected={setSelectedPerks}\n            onClickAdd={() => {\n              setIsAddPerksModalVisible(true);\n            }}\n            onClickDelete={() => {\n              setIsRemovePerksModalVisible(true);\n            }}\n            tableName=\"Group Perks\"\n            addButtonText=\"Add Group Perk\"\n          />\n        </Grid>\n        <Grid item sm={6} xs={12}>\n          <AddRemoveTable\n            height={600}\n            rows={groupEmails}\n            columns={columns}\n            setSelected={setSelectedEmployees}\n            onClickAdd={() => {\n              setIsAddEmployeesModalVisible(true);\n            }}\n            onClickDelete={() => {\n              setIsRemoveEmployeesModalVisible(true);\n            }}\n            tableName=\"Group Employees\"\n            addButtonText=\"Add Employees\"\n          />\n        </Grid>\n      </Grid>\n\n      <AddEmployees\n        isAddEmployeesModalVisible={isAddEmployeesModalVisible}\n        setIsAddEmployeesModalVisible={setIsAddEmployeesModalVisible}\n        group={id}\n        employees={groupEmails}\n        selectedPerks={groupPerks}\n      />\n      <RemoveEmployees\n        isRemoveEmployeesModalVisible={isRemoveEmployeesModalVisible}\n        setIsRemoveEmployeesModalVisible={setIsRemoveEmployeesModalVisible}\n        selectedEmployees={selectedEmployees}\n        setSelectedEmployees={setSelectedEmployees}\n      />\n\n      <AddPerks\n        isAddPerksModalVisible={isAddPerksModalVisible}\n        setIsAddPerksModalVisible={setIsAddPerksModalVisible}\n        selectedPerks={groupPerks}\n        group={id}\n        emails={groupEmails}\n      />\n      <RemovePerks\n        isRemovePerksModalVisible={isRemovePerksModalVisible}\n        setIsRemovePerksModalVisible={setIsRemovePerksModalVisible}\n        selectedPerks={selectedPerks}\n        setSelectedPerks={setSelectedPerks}\n      />\n      <ConfirmationModal\n        isModalVisible={isDeletePerkGroupModalVisible}\n        setIsModalVisible={setIsDeletePerkGroupModalVisible}\n        title=\"Delete Perk Group\"\n        description=\"Are you sure you want to delete this perk group and all of its employees? This cannot be undone.\"\n        onConfirmation={deletePerkGroup}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}