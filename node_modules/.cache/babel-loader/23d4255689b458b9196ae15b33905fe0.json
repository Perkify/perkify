{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/contexts/Auth.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { PerkifyApi } from 'services';\nimport app, { auth, db } from '../firebaseApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loadingAuthState, setLoadingAuthState] = useState(true);\n  const [admin, setAdmin] = useState({});\n  const location = useLocation();\n  const history = useHistory();\n  const [hasPaymentMethods, setHasPaymentMethods] = useState(false);\n  useEffect(() => {\n    app.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const userDoc = await db.collection('admins').doc(user.uid).get();\n\n        if (userDoc) {\n          setCurrentUser(user);\n          const adminData = userDoc.data();\n          setAdmin(adminData); // check if customer has payment methods\n\n          const customerDoc = await db.collection('customers').doc(user.uid).get();\n          const customerData = customerDoc.data();\n          const cardPaymentMethods = await PerkifyApi.post('/user/stripePaymentMethods', {\n            customer: customerData.stripeId,\n            type: 'card'\n          });\n\n          if (cardPaymentMethods.data.data.length > 0) {\n            setHasPaymentMethods(true);\n          }\n\n          setLoadingAuthState(false);\n\n          if (!location.pathname.includes('dashboard')) {\n            history.push('/dashboard');\n          }\n        } else {\n          auth.signOut();\n          alert('You do not have a registered admin account');\n        }\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      authenticated: currentUser !== null,\n      setCurrentUser,\n      loadingAuthState,\n      admin,\n      setAdmin,\n      hasPaymentMethods,\n      setHasPaymentMethods\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"ARaaqvYiRw4duTX5Y9Tqv4jSNPk=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/contexts/Auth.tsx"],"names":["React","useEffect","useState","useHistory","useLocation","PerkifyApi","app","auth","db","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","loadingAuthState","setLoadingAuthState","admin","setAdmin","location","history","hasPaymentMethods","setHasPaymentMethods","onAuthStateChanged","user","userDoc","collection","doc","uid","get","adminData","data","customerDoc","customerData","cardPaymentMethods","post","customer","stripeId","type","length","pathname","includes","push","signOut","alert","authenticated"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { PerkifyApi } from 'services';\nimport app, { auth, db } from '../firebaseApp';\n\ntype ContextProps = {\n  currentUser: firebase.User | null;\n  authenticated: boolean;\n  setCurrentUser: any;\n  loadingAuthState: boolean;\n  admin: any;\n  setAdmin: any;\n  hasPaymentMethods: boolean;\n  setHasPaymentMethods: any;\n};\n\nexport const AuthContext = React.createContext<Partial<ContextProps>>({});\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null as firebase.User | null);\n  const [loadingAuthState, setLoadingAuthState] = useState(true);\n  const [admin, setAdmin] = useState({});\n  const location = useLocation();\n  const history = useHistory();\n  const [hasPaymentMethods, setHasPaymentMethods] = useState(false);\n\n  useEffect(() => {\n    app.auth().onAuthStateChanged(async (user) => {\n      if (user) {\n        const userDoc = await db.collection('admins').doc(user.uid).get();\n        if (userDoc) {\n          setCurrentUser(user);\n          const adminData = userDoc.data();\n          setAdmin(adminData);\n\n          // check if customer has payment methods\n          const customerDoc = await db\n            .collection('customers')\n            .doc(user.uid)\n            .get();\n          const customerData = customerDoc.data();\n          const cardPaymentMethods = await PerkifyApi.post(\n            '/user/stripePaymentMethods',\n            {\n              customer: customerData.stripeId,\n              type: 'card',\n            }\n          );\n          if (cardPaymentMethods.data.data.length > 0) {\n            setHasPaymentMethods(true);\n          }\n          setLoadingAuthState(false);\n          if (!location.pathname.includes('dashboard')) {\n            history.push('/dashboard');\n          }\n        } else {\n          auth.signOut();\n          alert('You do not have a registered admin account');\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        authenticated: currentUser !== null,\n        setCurrentUser,\n        loadingAuthState,\n        admin,\n        setAdmin,\n        hasPaymentMethods,\n        setHasPaymentMethods,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}