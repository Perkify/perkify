{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/dashboard/GeneralDashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport Header from \"components/Header\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Card } from \"@material-ui/core\";\nimport PaymentIcon from '@material-ui/icons/Payment';\nimport MetricCard from \"./MetricCard\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport PChart from \"./piechart\";\nimport BChart from \"./BarChart\";\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { allPerksDict } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeneralDashboard = () => {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  var [employees, setEmployees] = useState([]);\n  var [groups, setGroups] = useState({});\n\n  function roundNumber(num) {\n    return Math.round(10 * num) / 10;\n  }\n\n  function calculatePieData() {\n    let tempDict = {};\n    employees.forEach(employee => {\n      let group = employee[\"group\"];\n\n      if (groups[group] === undefined) {\n        return 0;\n      }\n\n      groups[group].forEach(perk => {\n        if (perk in tempDict) {\n          tempDict[perk] += allPerksDict[perk].Cost;\n        } else {\n          tempDict[perk] = allPerksDict[perk].Cost;\n        }\n      });\n    });\n    let data = [];\n    let totalValue = 0;\n    Object.keys(tempDict).forEach(perk => {\n      let newRow = {\n        name: perk,\n        value: tempDict[perk]\n      };\n      totalValue = totalValue + tempDict[perk];\n      data.push(newRow);\n    });\n    console.log(tempDict);\n    let totalPercentage = 100; //Rounds number if all values don't add up to 100 \n\n    data.forEach(perkObj => {\n      perkObj.value = roundNumber(perkObj.value / totalValue * 100);\n      totalPercentage -= perkObj.value;\n      console.log(totalPercentage);\n\n      if (totalPercentage < 0) {\n        perkObj.value -= totalPercentage * -1;\n      }\n    });\n    return data;\n  }\n\n  function calculateTotalCost() {\n    let totalCost = 0;\n    let groupCost = {};\n    employees.forEach(employee => {\n      let cost = 0;\n      let group = employee[\"group\"];\n      console.log(groups);\n      console.log(group);\n      console.log(groups[group]);\n\n      if (groups[group] === undefined) {\n        return 0;\n      }\n\n      groups[group].forEach(perk => {\n        cost += allPerksDict[perk].Cost;\n      });\n      totalCost += cost;\n    });\n    return totalCost;\n  }\n\n  function calculatePerksOffered() {\n    let perks = new Set([]);\n    Object.keys(groups).forEach(group => {\n      groups[group].forEach(perk => {\n        perks.add(perk);\n      });\n    });\n    return perks.size;\n  }\n\n  function calculateBarGraphData() {\n    const data = [{\n      name: 'Perk A',\n      uv: 4000,\n      pv: 2400\n    }, {\n      name: 'Perk B',\n      uv: 3000,\n      pv: 1398\n    }, {\n      name: 'Perk C',\n      uv: 2000,\n      pv: 9800\n    }, {\n      name: 'Perk D',\n      uv: 2780,\n      pv: 3908\n    }, {\n      name: 'Perk E',\n      uv: 1890,\n      pv: 4800\n    }, {\n      name: 'Perk F',\n      uv: 2390,\n      pv: 3800\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300\n    }];\n  }\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\").doc(currentUser.uid).get().then(doc => {\n      const userData = doc.data();\n\n      if (userData) {\n        const businessId = userData[\"companyID\"];\n        console.log(\"Business ID\");\n        console.log(businessId);\n        db.collection(\"users\").where(\"businessID\", \"==\", businessId).get().then(querySnapshot => {\n          const people = querySnapshot.docs.map((doc, index) => ({\n            email: doc.id,\n            id: index,\n            group: doc.data()[\"group\"],\n            perks: doc.data()[\"perks\"]\n          }));\n          console.log(people);\n          db.collection(\"businesses\").doc(businessId).get().then(doc => {\n            const businessDoc = doc.data();\n\n            if (businessDoc) {\n              console.log(businessDoc.groups);\n              setEmployees(people);\n              setGroups(businessDoc.groups);\n            }\n          });\n        }).catch(error => {\n          alert(error);\n        });\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch(error => {\n      console.log(\"Error getting document:\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Dashboard\",\n      crumbs: [\"General dashboard\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Cost Per Employee\",\n          number: calculateTotalCost() / employees.length,\n          children: [\" \", /*#__PURE__*/_jsxDEV(PaymentIcon, {\n            style: {\n              display: \"block\",\n              margin: \"auto\",\n              width: 100,\n              height: 70,\n              color: \"blue\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 101\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Number of Employees\",\n          number: employees.length,\n          children: [\" \", /*#__PURE__*/_jsxDEV(PersonIcon, {\n            style: {\n              display: \"block\",\n              margin: \"auto\",\n              width: 100,\n              height: 70,\n              color: \"blue\"\n            },\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 78\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MetricCard, {\n          title: \"Total Perks Offered\",\n          number: calculatePerksOffered(),\n          children: [\" \", /*#__PURE__*/_jsxDEV(CardMembershipIcon, {\n            style: {\n              display: \"block\",\n              margin: \"auto\",\n              width: 100,\n              height: 70,\n              color: \"blue\"\n            },\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 87\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: \"95%\",\n            padding: 10,\n            height: 400\n          },\n          elevation: 4,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"100%\",\n              height: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                marginLeft: 10\n              },\n              children: \"Perks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 129\n            }, this), /*#__PURE__*/_jsxDEV(PChart, {\n              data: calculatePieData()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 11\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 84\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: \"95%\",\n            padding: 10,\n            height: 400\n          },\n          elevation: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"100%\",\n              height: \"100%\"\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                marginLeft: 10\n              },\n              children: \"Perks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 126\n            }, this), /*#__PURE__*/_jsxDEV(BChart, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 80\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GeneralDashboard, \"tKKiSZnxeq6o/Y0jXDFq0bF4yzY=\");\n\n_c = GeneralDashboard;\nexport default GeneralDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeneralDashboard\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/dashboard/GeneralDashboard.tsx"],"names":["Header","React","useEffect","useContext","useState","Grid","Card","PaymentIcon","MetricCard","PersonIcon","PChart","BChart","CardMembershipIcon","AuthContext","firebase","allPerksDict","GeneralDashboard","currentUser","employees","setEmployees","groups","setGroups","roundNumber","num","Math","round","calculatePieData","tempDict","forEach","employee","group","undefined","perk","Cost","data","totalValue","Object","keys","newRow","name","value","push","console","log","totalPercentage","perkObj","calculateTotalCost","totalCost","groupCost","cost","calculatePerksOffered","perks","Set","add","size","calculateBarGraphData","uv","pv","db","firestore","collection","doc","uid","get","then","userData","businessId","where","querySnapshot","people","docs","map","index","email","id","businessDoc","catch","error","alert","length","display","margin","width","height","color","padding","marginLeft"],"mappings":"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","sourcesContent":["import Header from \"components/Header\";\nimport React, {useEffect, useContext, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Card,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport PaymentIcon from '@material-ui/icons/Payment';\nimport MetricCard from \"./MetricCard\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport PChart from \"./piechart\";\nimport BChart from \"./BarChart\";\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { allPerks, allPerksDict } from \"../../constants\";\n\n\n\nconst GeneralDashboard = () => {\n\n  \n\n  const { currentUser } = useContext(AuthContext);\n\n  var [employees, setEmployees] = useState([])\n  var [groups, setGroups] = useState({})\n\n  function roundNumber(num){\n    return Math.round(10*num)/10; \n  }\n\n  function calculatePieData(){\n    let tempDict = {}\n    employees.forEach(employee => {\n      let group = employee[\"group\"]\n      if (groups[group] === undefined){\n        return 0\n      }\n      groups[group].forEach(perk => {\n        if (perk in tempDict){\n          tempDict[perk] += allPerksDict[perk].Cost\n        }\n        else{\n          tempDict[perk] = allPerksDict[perk].Cost\n        }\n      })\n    }\n    )\n    let data = []\n    let totalValue = 0 \n    Object.keys(tempDict).forEach(perk => {\n      let newRow = {name: perk, value: tempDict[perk]}\n      totalValue = totalValue + tempDict[perk]\n      data.push(newRow)\n    }\n    )\n    console.log(tempDict)\n    let totalPercentage = 100 //Rounds number if all values don't add up to 100 \n    data.forEach(perkObj => {\n      perkObj.value = roundNumber((perkObj.value / totalValue) * 100)\n      totalPercentage -= perkObj.value\n      console.log(totalPercentage)\n      if (totalPercentage < 0){\n        perkObj.value -= (totalPercentage * -1) \n      }\n    })\n    return data\n  }\n\n  function calculateTotalCost(){\n    let totalCost = 0 \n    \n    let groupCost = {}\n    employees.forEach(employee => {\n      let cost = 0 \n      let group = employee[\"group\"]\n      console.log(groups)\n      console.log(group)\n      console.log(groups[group])\n      if (groups[group] === undefined){\n        return 0\n      }\n      groups[group].forEach(perk => {\n        cost += allPerksDict[perk].Cost\n      })\n      totalCost += cost\n    })\n    return totalCost\n  }\n\n  function calculatePerksOffered(){\n    let perks = new Set([])\n    Object.keys(groups).forEach(group => {\n      groups[group].forEach(perk => {\n        perks.add(perk)\n      })\n    })\n    return perks.size\n  }\n\n  function calculateBarGraphData(){\n    const data = [\n      {\n        name: 'Perk A',\n        uv: 4000,\n        pv: 2400,\n      },\n      {\n        name: 'Perk B',\n        uv: 3000,\n        pv: 1398,\n      },\n      {\n        name: 'Perk C',\n        uv: 2000,\n        pv: 9800,\n      },\n      {\n        name: 'Perk D',\n        uv: 2780,\n        pv: 3908,\n      },\n      {\n        name: 'Perk E',\n        uv: 1890,\n        pv: 4800,\n      },\n      {\n        name: 'Perk F',\n        uv: 2390,\n        pv: 3800,\n      },\n      {\n        name: 'Page G',\n        uv: 3490,\n        pv: 4300,\n      },\n    ];\n\n\n  }\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\")\n      .doc(currentUser.uid)\n      .get()\n      .then((doc) => {\n        const userData = doc.data();\n        if (userData) {\n          const businessId = userData[\"companyID\"];\n          console.log(\"Business ID\");\n          console.log(businessId);\n\n          db.collection(\"users\")\n            .where(\"businessID\", \"==\", businessId)\n            .get()\n            .then((querySnapshot) => {\n              const people = querySnapshot.docs.map((doc, index) => ({\n                email: doc.id,\n                id: index,\n                group: doc.data()[\"group\"],\n                perks: doc.data()[\"perks\"]\n              }));\n              console.log(people)\n              db.collection(\"businesses\")\n              .doc(businessId)\n              .get()\n              .then((doc) => {\n                const businessDoc = doc.data();\n                if (businessDoc) {\n                  console.log(businessDoc.groups);\n                  setEmployees(people)\n                  setGroups(businessDoc.groups);\n                }\n              });\n            })\n            .catch((error) => {\n              alert(error);\n            });\n        } else {\n          console.log(\"No such document!\");\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error getting document:\", error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <Header title=\"Dashboard\" crumbs={[\"General dashboard\"]} />\n      <Grid\n        container\n        spacing={0}\n        direction= \"row\"\n      >\n\n        <Grid item xs ={4}> \n          <MetricCard title={\"Cost Per Employee\"} number={calculateTotalCost() / employees.length}> <PaymentIcon style={{display: \"block\", margin: \"auto\", width: 100, height: 70, color: \"blue\"}}></PaymentIcon> </MetricCard>\n        </Grid>\n        <Grid item xs ={4}>  \n        <MetricCard title={\"Number of Employees\"} number={employees.length}> <PersonIcon style={{display: \"block\", margin: \"auto\", width: 100, height: 70, color: \"blue\"}}> </PersonIcon> </MetricCard> \n        </Grid>\n        <Grid item xs ={4}> \n          <MetricCard title={\"Total Perks Offered\"} number={calculatePerksOffered()}> <CardMembershipIcon style={{display: \"block\", margin: \"auto\", width: 100, height: 70, color: \"blue\"}}> </CardMembershipIcon> </MetricCard> \n        </Grid>\n        </Grid> \n\n        <br/> \n        <Grid\n        container\n        spacing={0}\n        direction= \"row\"\n      >\n        <Grid item xs={4}> \n          <Card style={{ width: \"95%\", padding: 10, height: 400 }} elevation={4} > <div style={{width: \"100%\", height: \"100%\"}}><h1 style={{marginLeft: 10}}>Perks</h1>\n          <PChart data={calculatePieData()}/> </div></Card>\n        </Grid> \n        <Grid item xs={8}> \n        <Card style={{ width: \"95%\", padding: 10, height: 400 }} elevation={4}><div style={{width: \"100%\", height: \"100%\"}}> <h1 style={{marginLeft: 10}}>Perks</h1>\n          <BChart/></div> </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default GeneralDashboard;\n"]},"metadata":{},"sourceType":"module"}