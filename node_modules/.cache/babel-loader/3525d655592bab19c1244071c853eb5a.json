{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/employees/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { validateEmails } from \"utils/emailValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300,\n  editable: false\n}, {\n  field: \"group\",\n  headerName: \"Group\",\n  width: 200,\n  editable: false\n}];\nexport default function ManagePeople() {\n  _s();\n\n  const [isRemoveModalVisible, setIsRemoveModalVisible] = useState(false);\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n  const [selectedUsers, setSelection] = useState([]);\n  const [groupData, setGroupData] = useState([\"Cole's Group\"]);\n  const [selectedPerkGroup, setSelectedPerkGroup] = useState([]);\n  const [emails, setEmails] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handleOk = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  function getRemovedUserEmails() {\n    var removedUsers = [];\n    selectedUsers.forEach(index => {\n      removedUsers.push(peopleData[index].email);\n    });\n    return removedUsers;\n  }\n\n  const [peopleData, setPeopleData] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\").doc(currentUser.uid).get().then(doc => {\n      const userData = doc.data();\n\n      if (userData) {\n        const businessId = userData[\"companyID\"];\n        console.log(\"Business ID\");\n        console.log(businessId);\n        db.collection(\"users\").where(\"businessID\", \"==\", businessId).get().then(querySnapshot => {\n          const emails = querySnapshot.docs.map((doc, index) => ({\n            email: doc.id,\n            id: index,\n            group: doc.data()[\"group\"]\n          }));\n          console.log(\"EMAILS\");\n          console.log(emails);\n          setPeopleData(emails);\n        }).catch(error => {\n          alert(error);\n        });\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch(error => {\n      console.log(\"Error getting document:\", error);\n    });\n  }, []);\n\n  const handleEmailError = event => {\n    setEmails(event.target.value);\n\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addToPerkGroup = event => {\n    event.preventDefault();\n    let error = false;\n\n    if (emails == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n\n    if (selectedPerkGroup.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n\n    if (!error) {\n      setIsAddModalVisible(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Manage Employees\",\n      crumbs: [\"Dashboard\", \"People\", \"Employees\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n      rows: peopleData,\n      columns: columns,\n      setSelected: setSelection,\n      height: 500,\n      onClickAdd: () => setIsAddModalVisible(true),\n      onClickDelete: () => {\n        setIsRemoveModalVisible(true);\n      },\n      tableName: \"Employees\",\n      addButtonText: \"Add Employees\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isAddModalVisible,\n      onClose: () => setIsAddModalVisible(false),\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Add Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To add users to this organization, please enter their email addresses below and select a group from the dropdown.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"30px\",\n            marginBottom: \"15px\"\n          },\n          children: \"Emails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"emailaddresses\",\n          variant: \"outlined\",\n          label: \"\",\n          placeholder: \"Insert emails separated by commas or newlines\",\n          value: emails,\n          onChange: handleEmailError,\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          rowsMax: 4,\n          error: emailsError != \"\",\n          helperText: emailsError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"30px\",\n            marginBottom: \"15px\"\n          },\n          children: \"Perk Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          displayEmpty: true,\n          renderValue: selected => {\n            if (selected.length === 0) {\n              return \"Select Perks\";\n            }\n\n            return selected.join(\", \");\n          },\n          variant: \"outlined\",\n          value: selectedPerkGroup,\n          multiple: true,\n          fullWidth: true,\n          onChange: event => {\n            setSelectedPerksError(\"\");\n            setSelectedPerkGroup(event.target.value);\n          },\n          error: selectedPerksError != \"\",\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            disabled: true,\n            children: \"Select Perk Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), groupData.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: name,\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsAddModalVisible(false),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addToPerkGroup,\n          color: \"primary\",\n          children: \"Add Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isRemoveModalVisible,\n      onClose: () => setIsRemoveModalVisible(false),\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Delete Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete these users? This cannot be undone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveModalVisible(false),\n          color: \"primary\",\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveModalVisible(false),\n          color: \"primary\",\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ManagePeople, \"Fks09Z15E2p8hCs/w/ftiVccI2w=\");\n\n_c = ManagePeople;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManagePeople\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/employees/index.tsx"],"names":["MenuItem","Select","Typography","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","AddRemoveTable","Header","AuthContext","firebase","React","useContext","useEffect","useState","validateEmails","columns","field","headerName","width","editable","ManagePeople","isRemoveModalVisible","setIsRemoveModalVisible","isAddModalVisible","setIsAddModalVisible","selectedUsers","setSelection","groupData","setGroupData","selectedPerkGroup","setSelectedPerkGroup","emails","setEmails","emailsError","setEmailsError","selectedPerksError","setSelectedPerksError","handleOk","handleCancel","getRemovedUserEmails","removedUsers","forEach","index","push","peopleData","email","setPeopleData","currentUser","db","firestore","collection","doc","uid","get","then","userData","data","businessId","console","log","where","querySnapshot","docs","map","id","group","catch","error","alert","handleEmailError","event","target","value","addToPerkGroup","preventDefault","length","marginTop","marginBottom","selected","join","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,QAA6C,mBAA7C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,cAAT,QAA+B,uBAA/B;;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,UAAU,EAAE,OAFd;AAGEC,EAAAA,KAAK,EAAE,GAHT;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CADc,EAOd;AACEH,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,UAAU,EAAE,OAFd;AAGEC,EAAAA,KAAK,EAAE,GAHT;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAPc,CAAhB;AAeA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDT,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACY,aAAD,EAAgBC,YAAhB,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,CAAC,cAAD,CAAD,CAA1C;AACA,QAAM,CAACgB,iBAAD,EAAoBC,oBAApB,IAA4CjB,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACsB,kBAAD,EAAqBC,qBAArB,IAA8CvB,QAAQ,CAAC,EAAD,CAA5D;;AAEA,QAAMwB,QAAQ,GAAG,MAAM;AACrBf,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAHD;;AAKA,QAAMc,YAAY,GAAG,MAAM;AACzBhB,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAHD;;AAKA,WAASe,oBAAT,GAAgC;AAC9B,QAAIC,YAAmB,GAAG,EAA1B;AACAf,IAAAA,aAAa,CAACgB,OAAd,CAAuBC,KAAD,IAAW;AAC/BF,MAAAA,YAAY,CAACG,IAAb,CAAkBC,UAAU,CAACF,KAAD,CAAV,CAAkBG,KAApC;AACD,KAFD;AAGA,WAAOL,YAAP;AACD;;AAED,QAAM,CAACI,UAAD,EAAaE,aAAb,IAA8BjC,QAAQ,CAAQ,EAAR,CAA5C;AACA,QAAM;AAAEkC,IAAAA;AAAF,MAAkBpC,UAAU,CAACH,WAAD,CAAlC;AAEAI,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoC,EAAE,GAAGvC,QAAQ,CAACwC,SAAT,EAAX;AACAD,IAAAA,EAAE,CAACE,UAAH,CAAc,QAAd,EACGC,GADH,CACOJ,WAAW,CAACK,GADnB,EAEGC,GAFH,GAGGC,IAHH,CAGSH,GAAD,IAAS;AACb,YAAMI,QAAQ,GAAGJ,GAAG,CAACK,IAAJ,EAAjB;;AACA,UAAID,QAAJ,EAAc;AACZ,cAAME,UAAU,GAAGF,QAAQ,CAAC,WAAD,CAA3B;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAT,QAAAA,EAAE,CAACE,UAAH,CAAc,OAAd,EACGU,KADH,CACS,YADT,EACuB,IADvB,EAC6BH,UAD7B,EAEGJ,GAFH,GAGGC,IAHH,CAGSO,aAAD,IAAmB;AACvB,gBAAM9B,MAAM,GAAG8B,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuB,CAACZ,GAAD,EAAMT,KAAN,MAAiB;AACrDG,YAAAA,KAAK,EAAEM,GAAG,CAACa,EAD0C;AAErDA,YAAAA,EAAE,EAAEtB,KAFiD;AAGrDuB,YAAAA,KAAK,EAAEd,GAAG,CAACK,IAAJ,GAAW,OAAX;AAH8C,WAAjB,CAAvB,CAAf;AAKAE,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY5B,MAAZ;AACAe,UAAAA,aAAa,CAACf,MAAD,CAAb;AACD,SAZH,EAaGmC,KAbH,CAaUC,KAAD,IAAW;AAChBC,UAAAA,KAAK,CAACD,KAAD,CAAL;AACD,SAfH;AAgBD,OArBD,MAqBO;AACLT,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,KA7BH,EA8BGO,KA9BH,CA8BUC,KAAD,IAAW;AAChBT,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCQ,KAAvC;AACD,KAhCH;AAiCD,GAnCQ,EAmCN,EAnCM,CAAT;;AAqCA,QAAME,gBAAgB,GAAIC,KAAD,IAAW;AAClCtC,IAAAA,SAAS,CAACsC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;;AACA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC7BtC,MAAAA,cAAc,CAAC,gCAAD,CAAd;AACD,KAFD,MAEO,IAAI,CAACpB,cAAc,CAACwD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB,EAAyC;AAC9CtC,MAAAA,cAAc,CAAC,4BAAD,CAAd;AACD,KAFM,MAEA;AACLA,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GATD;;AAWA,QAAMuC,cAAc,GAAIH,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACI,cAAN;AACA,QAAIP,KAAK,GAAG,KAAZ;;AACA,QAAIpC,MAAM,IAAI,EAAd,EAAkB;AAChBG,MAAAA,cAAc,CAAC,cAAD,CAAd;AACAiC,MAAAA,KAAK,GAAG,IAAR;AACD;;AACD,QAAItC,iBAAiB,CAAC8C,MAAlB,IAA4B,CAAhC,EAAmC;AACjCvC,MAAAA,qBAAqB,CAAC,cAAD,CAArB;AACA+B,MAAAA,KAAK,GAAG,IAAR;AACD;;AACD,QAAI,CAACA,KAAL,EAAY;AACV3C,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF,GAdD;;AAgBA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAC,kBADR;AAEE,MAAA,MAAM,EAAE,CAAC,WAAD,EAAc,QAAd,EAAwB,WAAxB;AAFV;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,cAAD;AACE,MAAA,IAAI,EAAEoB,UADR;AAEE,MAAA,OAAO,EAAE7B,OAFX;AAGE,MAAA,WAAW,EAAEW,YAHf;AAIE,MAAA,MAAM,EAAE,GAJV;AAKE,MAAA,UAAU,EAAE,MAAMF,oBAAoB,CAAC,IAAD,CALxC;AAME,MAAA,aAAa,EAAE,MAAM;AACnBF,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACD,OARH;AASE,MAAA,SAAS,EAAC,WATZ;AAUE,MAAA,aAAa,EAAC;AAVhB;AAAA;AAAA;AAAA;AAAA,YANF,eAkBE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEC,iBADR;AAEE,MAAA,OAAO,EAAE,MAAMC,oBAAoB,CAAC,KAAD,CAFrC;AAGE,yBAAgB,mBAHlB;AAAA,8BAKE,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,aAAD;AAAA,gCACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAE;AAAEoD,YAAAA,SAAS,EAAE,MAAb;AAAqBC,YAAAA,YAAY,EAAE;AAAnC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAQE,QAAC,SAAD;AACE,UAAA,EAAE,EAAC,gBADL;AAEE,UAAA,OAAO,EAAC,UAFV;AAGE,UAAA,KAAK,EAAC,EAHR;AAIE,UAAA,WAAW,EAAC,+CAJd;AAKE,UAAA,KAAK,EAAE9C,MALT;AAME,UAAA,QAAQ,EAAEsC,gBANZ;AAOE,UAAA,SAAS,MAPX;AAQE,UAAA,SAAS,MARX;AASE,UAAA,IAAI,EAAE,CATR;AAUE,UAAA,OAAO,EAAE,CAVX;AAWE,UAAA,KAAK,EAAEpC,WAAW,IAAI,EAXxB;AAYE,UAAA,UAAU,EAAEA;AAZd;AAAA;AAAA;AAAA;AAAA,gBARF,eAsBE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAE;AAAE2C,YAAAA,SAAS,EAAE,MAAb;AAAqBC,YAAAA,YAAY,EAAE;AAAnC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF,eAyBE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,0BADV;AAEE,UAAA,EAAE,EAAC,oBAFL;AAGE,UAAA,YAAY,MAHd;AAIE,UAAA,WAAW,EAAGC,QAAD,IAAc;AACzB,gBAAKA,QAAD,CAAuBH,MAAvB,KAAkC,CAAtC,EAAyC;AACvC,qBAAO,cAAP;AACD;;AAED,mBAAQG,QAAD,CAAuBC,IAAvB,CAA4B,IAA5B,CAAP;AACD,WAVH;AAWE,UAAA,OAAO,EAAC,UAXV;AAYE,UAAA,KAAK,EAAElD,iBAZT;AAaE,UAAA,QAAQ,MAbV;AAcE,UAAA,SAAS,MAdX;AAeE,UAAA,QAAQ,EAAGyC,KAAD,IAAW;AACnBlC,YAAAA,qBAAqB,CAAC,EAAD,CAArB;AACAN,YAAAA,oBAAoB,CAACwC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAApB;AACD,WAlBH;AAmBE,UAAA,KAAK,EAAErC,kBAAkB,IAAI,EAnB/B;AAAA,kCAqBE,QAAC,QAAD;AAAU,YAAA,KAAK,EAAC,EAAhB;AAAmB,YAAA,QAAQ,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBF,EAwBGR,SAAS,CAACoC,GAAV,CAAeiB,IAAD,iBACb,QAAC,QAAD;AAAU,YAAA,KAAK,EAAEA,IAAjB;AAAA,sBACGA;AADH,aAA4BA,IAA5B;AAAA;AAAA;AAAA;AAAA,kBADD,CAxBH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eA8DE,QAAC,aAAD;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAMxD,oBAAoB,CAAC,KAAD,CAA3C;AAAoD,UAAA,KAAK,EAAC,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEiD,cAAjB;AAAiC,UAAA,KAAK,EAAC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DF;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,eA0FE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEpD,oBADR;AAEE,MAAA,OAAO,EAAE,MAAMC,uBAAuB,CAAC,KAAD,CAFxC;AAGE,yBAAgB,mBAHlB;AAAA,8BAKE,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,aAAD;AAAA,+BACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF,eAWE,QAAC,aAAD;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAE,MAAMA,uBAAuB,CAAC,KAAD,CADxC;AAEE,UAAA,KAAK,EAAC,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AACE,UAAA,OAAO,EAAE,MAAMA,uBAAuB,CAAC,KAAD,CADxC;AAEE,UAAA,KAAK,EAAC,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YA1FF;AAAA,kBADF;AAuHD;;GAtNuBF,Y;;KAAAA,Y","sourcesContent":["import { MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AuthContext } from \"contexts/Auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { validateEmails } from \"utils/emailValidation\";\n\nconst columns = [\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    width: 300,\n    editable: false,\n  },\n  {\n    field: \"group\",\n    headerName: \"Group\",\n    width: 200,\n    editable: false,\n  },\n];\n\nexport default function ManagePeople() {\n  const [isRemoveModalVisible, setIsRemoveModalVisible] = useState(false);\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n  const [selectedUsers, setSelection] = useState([]);\n  const [groupData, setGroupData] = useState([\"Cole's Group\"]);\n  const [selectedPerkGroup, setSelectedPerkGroup] = useState([]);\n  const [emails, setEmails] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handleOk = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  function getRemovedUserEmails() {\n    var removedUsers: any[] = [];\n    selectedUsers.forEach((index) => {\n      removedUsers.push(peopleData[index].email);\n    });\n    return removedUsers;\n  }\n\n  const [peopleData, setPeopleData] = useState<any[]>([]);\n  const { currentUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"admins\")\n      .doc(currentUser.uid)\n      .get()\n      .then((doc) => {\n        const userData = doc.data();\n        if (userData) {\n          const businessId = userData[\"companyID\"];\n          console.log(\"Business ID\");\n          console.log(businessId);\n\n          db.collection(\"users\")\n            .where(\"businessID\", \"==\", businessId)\n            .get()\n            .then((querySnapshot) => {\n              const emails = querySnapshot.docs.map((doc, index) => ({\n                email: doc.id,\n                id: index,\n                group: doc.data()[\"group\"],\n              }));\n              console.log(\"EMAILS\");\n              console.log(emails);\n              setPeopleData(emails);\n            })\n            .catch((error) => {\n              alert(error);\n            });\n        } else {\n          console.log(\"No such document!\");\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error getting document:\", error);\n      });\n  }, []);\n\n  const handleEmailError = (event) => {\n    setEmails(event.target.value);\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addToPerkGroup = (event) => {\n    event.preventDefault();\n    let error = false;\n    if (emails == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n    if (selectedPerkGroup.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n    if (!error) {\n      setIsAddModalVisible(false);\n    }\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Manage Employees\"\n        crumbs={[\"Dashboard\", \"People\", \"Employees\"]}\n      />\n\n      <AddRemoveTable\n        rows={peopleData}\n        columns={columns}\n        setSelected={setSelection}\n        height={500}\n        onClickAdd={() => setIsAddModalVisible(true)}\n        onClickDelete={() => {\n          setIsRemoveModalVisible(true);\n        }}\n        tableName=\"Employees\"\n        addButtonText=\"Add Employees\"\n      />\n      <Dialog\n        open={isAddModalVisible}\n        onClose={() => setIsAddModalVisible(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add Users</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To add users to this organization, please enter their email\n            addresses below and select a group from the dropdown.\n          </DialogContentText>\n          <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n            Emails\n          </Typography>\n          <TextField\n            id=\"emailaddresses\"\n            variant=\"outlined\"\n            label=\"\"\n            placeholder=\"Insert emails separated by commas or newlines\"\n            value={emails}\n            onChange={handleEmailError}\n            fullWidth\n            multiline\n            rows={4}\n            rowsMax={4}\n            error={emailsError != \"\"}\n            helperText={emailsError}\n          />\n          <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n            Perk Group\n          </Typography>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            displayEmpty\n            renderValue={(selected) => {\n              if ((selected as string[]).length === 0) {\n                return \"Select Perks\";\n              }\n\n              return (selected as string[]).join(\", \");\n            }}\n            variant=\"outlined\"\n            value={selectedPerkGroup}\n            multiple\n            fullWidth\n            onChange={(event) => {\n              setSelectedPerksError(\"\");\n              setSelectedPerkGroup(event.target.value as string[]);\n            }}\n            error={selectedPerksError != \"\"}\n          >\n            <MenuItem value=\"\" disabled>\n              Select Perk Group\n            </MenuItem>\n            {groupData.map((name) => (\n              <MenuItem value={name} key={name}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsAddModalVisible(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={addToPerkGroup} color=\"primary\">\n            Add Users\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={isRemoveModalVisible}\n        onClose={() => setIsRemoveModalVisible(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Delete Users</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete these users? This cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => setIsRemoveModalVisible(false)}\n            color=\"primary\"\n          >\n            No\n          </Button>\n          <Button\n            onClick={() => setIsRemoveModalVisible(false)}\n            color=\"primary\"\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}