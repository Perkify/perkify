{"ast":null,"code":"var _jsxFileName = \"/Users/jerryye/perkify/src/views/employees/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AdminContext, AuthContext, BusinessContext } from \"contexts\";\nimport { db } from \"firebaseApp\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"email\",\n  headerName: \"Email\",\n  width: 300,\n  editable: false\n}, {\n  field: \"group\",\n  headerName: \"Group\",\n  width: 200,\n  editable: false\n}];\nexport default function ManagePeople(props) {\n  _s();\n\n  const [isRemoveModalVisible, setIsRemoveModalVisible] = useState(false);\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n  const [selectedUsers, setSelection] = useState([]);\n  const [selectedPerkGroup, setSelectedPerkGroup] = useState([]);\n  const [emails, setEmails] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handleOk = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  function getRemovedUserEmails() {\n    var removedUsers = [];\n    selectedUsers.forEach(index => {\n      removedUsers.push(peopleData[index].email);\n    });\n    return removedUsers;\n  }\n\n  const [peopleData, setPeopleData] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    business\n  } = useContext(BusinessContext);\n  const {\n    admin\n  } = useContext(AdminContext);\n  const groupData = Object.keys(business[\"groups\"]).sort();\n  useEffect(() => {\n    start; // get list of employees that belong to the business\n\n    db.collection(\"users\").where(\"businessID\", \"==\", admin.companyID).get().then(querySnapshot => {\n      setPeopleData(querySnapshot.docs.map((doc, index) => ({\n        email: doc.id,\n        id: index,\n        group: doc.data()[\"group\"]\n      })));\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const handleEmailError = event => {\n    setEmails(event.target.value);\n\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addToPerkGroup = event => {\n    event.preventDefault();\n    let error = false;\n\n    if (emails == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n\n    if (selectedPerkGroup.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n\n    if (!error) {\n      setIsAddModalVisible(false);\n\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n        const emailList = emails.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n\n        await PerkifyApi.put(\"user/auth/updatePerkGroup\", JSON.stringify({\n          group: selectedPerkGroup,\n          perks: [],\n          emails: emailList.concat(peopleData.filter(employeeObj => employeeObj.group == selectedPerkGroup).map(employeeObj => employeeObj.email))\n        }), {\n          headers: {\n            Authorization: `Bearer ${bearerToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      })();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Manage Employees\",\n      crumbs: [\"Dashboard\", \"People\", \"Employees\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddRemoveTable, {\n      rows: peopleData,\n      columns: columns,\n      setSelected: setSelection,\n      height: 500,\n      onClickAdd: () => setIsAddModalVisible(true),\n      onClickDelete: () => {\n        setIsRemoveModalVisible(true);\n      },\n      tableName: \"Employees\",\n      addButtonText: \"Add Employees\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isAddModalVisible,\n      onClose: () => setIsAddModalVisible(false),\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Add Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To add users to this organization, please enter their email addresses below and select a group from the dropdown.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"30px\",\n            marginBottom: \"15px\"\n          },\n          children: \"Emails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"emailaddresses\",\n          variant: \"outlined\",\n          label: \"\",\n          placeholder: \"Insert emails separated by commas or newlines\",\n          value: emails,\n          onChange: handleEmailError,\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          rowsMax: 4,\n          error: emailsError != \"\",\n          helperText: emailsError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"30px\",\n            marginBottom: \"15px\"\n          },\n          children: \"Perk Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          displayEmpty: true,\n          variant: \"outlined\",\n          value: selectedPerkGroup,\n          fullWidth: true,\n          onChange: event => {\n            setSelectedPerksError(\"\");\n            setSelectedPerkGroup(event.target.value);\n          },\n          error: selectedPerksError != \"\",\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            disabled: true,\n            children: \"Select Perk Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), groupData.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: name,\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsAddModalVisible(false),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addToPerkGroup,\n          color: \"primary\",\n          children: \"Add Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isRemoveModalVisible,\n      onClose: () => setIsRemoveModalVisible(false),\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Delete Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete these users? This cannot be undone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveModalVisible(false),\n          color: \"primary\",\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsRemoveModalVisible(false),\n          color: \"primary\",\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ManagePeople, \"JownJ3oMQFaUJV3fTLSmRd9nkQ8=\");\n\n_c = ManagePeople;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManagePeople\");","map":{"version":3,"sources":["/Users/jerryye/perkify/src/views/employees/index.tsx"],"names":["MenuItem","Select","Typography","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","AddRemoveTable","Header","AdminContext","AuthContext","BusinessContext","db","React","useContext","useEffect","useState","PerkifyApi","validateEmails","columns","field","headerName","width","editable","ManagePeople","props","isRemoveModalVisible","setIsRemoveModalVisible","isAddModalVisible","setIsAddModalVisible","selectedUsers","setSelection","selectedPerkGroup","setSelectedPerkGroup","emails","setEmails","emailsError","setEmailsError","selectedPerksError","setSelectedPerksError","handleOk","handleCancel","getRemovedUserEmails","removedUsers","forEach","index","push","peopleData","email","setPeopleData","currentUser","business","admin","groupData","Object","keys","sort","start","collection","where","companyID","get","then","querySnapshot","docs","map","doc","id","group","data","catch","error","console","log","handleEmailError","event","target","value","addToPerkGroup","preventDefault","length","bearerToken","getIdToken","emailList","replace","split","put","JSON","stringify","perks","concat","filter","employeeObj","headers","Authorization","marginTop","marginBottom","name"],"mappings":"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","sourcesContent":["import { MenuItem, Select, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { AddRemoveTable } from \"components/AddRemoveTable\";\nimport Header from \"components/Header\";\nimport { AdminContext, AuthContext, BusinessContext } from \"contexts\";\nimport { db } from \"firebaseApp\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { PerkifyApi } from \"services\";\nimport { validateEmails } from \"utils/emailValidation\";\n\nconst columns = [\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    width: 300,\n    editable: false,\n  },\n  {\n    field: \"group\",\n    headerName: \"Group\",\n    width: 200,\n    editable: false,\n  },\n];\n\nexport default function ManagePeople(props) {\n  const [isRemoveModalVisible, setIsRemoveModalVisible] = useState(false);\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n  const [selectedUsers, setSelection] = useState([]);\n  const [selectedPerkGroup, setSelectedPerkGroup] = useState([]);\n  const [emails, setEmails] = useState(\"\");\n  const [emailsError, setEmailsError] = useState(\"\");\n  const [selectedPerksError, setSelectedPerksError] = useState(\"\");\n\n  const handleOk = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsRemoveModalVisible(false);\n    setIsAddModalVisible(false);\n  };\n\n  function getRemovedUserEmails() {\n    var removedUsers: any[] = [];\n    selectedUsers.forEach((index) => {\n      removedUsers.push(peopleData[index].email);\n    });\n    return removedUsers;\n  }\n\n  const [peopleData, setPeopleData] = useState<any[]>([]);\n  const { currentUser } = useContext(AuthContext);\n  const { business } = useContext(BusinessContext);\n  const { admin } = useContext(AdminContext);\n  const groupData = Object.keys(business[\"groups\"]).sort();\n\n  useEffect(() => {\n    start\n    // get list of employees that belong to the business\n    db.collection(\"users\")\n      .where(\"businessID\", \"==\", admin.companyID)\n      .get()\n      .then((querySnapshot) => {\n        setPeopleData(\n          querySnapshot.docs.map((doc, index) => ({\n            email: doc.id,\n            id: index,\n            group: doc.data()[\"group\"],\n          }))\n        );\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const handleEmailError = (event) => {\n    setEmails(event.target.value);\n    if (event.target.value === \"\") {\n      setEmailsError(\"Please input atleast one email\");\n    } else if (!validateEmails(event.target.value)) {\n      setEmailsError(\"Please input proper emails\");\n    } else {\n      setEmailsError(\"\");\n    }\n  };\n\n  const addToPerkGroup = (event) => {\n    event.preventDefault();\n    let error = false;\n    if (emails == \"\") {\n      setEmailsError(\"Enter emails\");\n      error = true;\n    }\n    if (selectedPerkGroup.length == 0) {\n      setSelectedPerksError(\"Select perks\");\n      error = true;\n    }\n    if (!error) {\n      setIsAddModalVisible(false);\n\n      (async () => {\n        const bearerToken = await currentUser.getIdToken();\n\n        const emailList = emails.replace(/[,'\"]+/gi, \" \").split(/\\s+/); //Gives email as a list\n\n        await PerkifyApi.put(\n          \"user/auth/updatePerkGroup\",\n          JSON.stringify({\n            group: selectedPerkGroup,\n            perks: [],\n            emails: emailList.concat(\n              peopleData\n                .filter((employeeObj) => employeeObj.group == selectedPerkGroup)\n                .map((employeeObj) => employeeObj.email)\n            ),\n          }),\n          {\n            headers: {\n              Authorization: `Bearer ${bearerToken}`,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n      })();\n    }\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Manage Employees\"\n        crumbs={[\"Dashboard\", \"People\", \"Employees\"]}\n      />\n\n      <AddRemoveTable\n        rows={peopleData}\n        columns={columns}\n        setSelected={setSelection}\n        height={500}\n        onClickAdd={() => setIsAddModalVisible(true)}\n        onClickDelete={() => {\n          setIsRemoveModalVisible(true);\n        }}\n        tableName=\"Employees\"\n        addButtonText=\"Add Employees\"\n      />\n      <Dialog\n        open={isAddModalVisible}\n        onClose={() => setIsAddModalVisible(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add Users</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To add users to this organization, please enter their email\n            addresses below and select a group from the dropdown.\n          </DialogContentText>\n          <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n            Emails\n          </Typography>\n          <TextField\n            id=\"emailaddresses\"\n            variant=\"outlined\"\n            label=\"\"\n            placeholder=\"Insert emails separated by commas or newlines\"\n            value={emails}\n            onChange={handleEmailError}\n            fullWidth\n            multiline\n            rows={4}\n            rowsMax={4}\n            error={emailsError != \"\"}\n            helperText={emailsError}\n          />\n          <Typography style={{ marginTop: \"30px\", marginBottom: \"15px\" }}>\n            Perk Group\n          </Typography>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            displayEmpty\n            variant=\"outlined\"\n            value={selectedPerkGroup}\n            fullWidth\n            onChange={(event) => {\n              setSelectedPerksError(\"\");\n              setSelectedPerkGroup(event.target.value as string[]);\n            }}\n            error={selectedPerksError != \"\"}\n          >\n            <MenuItem value=\"\" disabled>\n              Select Perk Group\n            </MenuItem>\n            {groupData.map((name) => (\n              <MenuItem value={name} key={name}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsAddModalVisible(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={addToPerkGroup} color=\"primary\">\n            Add Users\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={isRemoveModalVisible}\n        onClose={() => setIsRemoveModalVisible(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Delete Users</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete these users? This cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => setIsRemoveModalVisible(false)}\n            color=\"primary\"\n          >\n            No\n          </Button>\n          <Button\n            onClick={() => setIsRemoveModalVisible(false)}\n            color=\"primary\"\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}